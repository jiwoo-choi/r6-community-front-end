{"version":3,"sources":["Library/R6Ajax.ts","../node_modules/semantic-ui-react/dist/es/views/Comment/CommentAction.js","../node_modules/semantic-ui-react/dist/es/views/Comment/CommentActions.js","../node_modules/semantic-ui-react/dist/es/views/Comment/CommentAuthor.js","../node_modules/semantic-ui-react/dist/es/views/Comment/CommentAvatar.js","../node_modules/semantic-ui-react/dist/es/views/Comment/CommentContent.js","../node_modules/semantic-ui-react/dist/es/views/Comment/CommentGroup.js","../node_modules/semantic-ui-react/dist/es/views/Comment/CommentMetadata.js","../node_modules/semantic-ui-react/dist/es/views/Comment/CommentText.js","../node_modules/semantic-ui-react/dist/es/views/Comment/Comment.js","../node_modules/semantic-ui-react/dist/es/elements/Divider/Divider.js","Component/@2Content/Contents/Post/View/R6PostReactor.tsx","Component/@2Content/Contents/Post/View/R6Post.tsx"],"names":["R6Ajax","accessToken","baseUrl","baseURLWithAPIVersion","this","id","pwd","href","URL","ajax","post","password","username","pipe","map","value","response","jwtToken","url","body","headers","withAccessToken","getHeader","getJSON","header","instance","createInstance","CommentAction","props","active","className","children","content","classes","cx","useKeyOnly","rest","getUnhandledProps","ElementType","getElementType","React","createElement","_extends","childrenUtils","isNil","handledProps","defaultProps","as","propTypes","CommentActions","CommentAuthor","CommentAvatar","src","_partitionHTMLProps","partitionHTMLProps","htmlProps","htmlImageProps","_partitionHTMLProps2","_slicedToArray","imageProps","rootProps","createHTMLImage","autoGenerateKey","CommentContent","CommentGroup","collapsed","minimal","size","threaded","CommentMetadata","CommentText","Comment","Author","Action","Actions","Avatar","Content","Group","Metadata","Text","Divider","clearing","fitted","hidden","horizontal","inverted","section","vertical","PostInitialState","commentsList","commentIsLoading","commentIsError","PostReactor","action","type","concat","of","loading","postComment","postId","flatMap","res","updateComment","parentCommentId","state","mutation","newState","shared","getJson","commentList","Reactor","POSTAREA","styled","div","VIEWERAREA","SUBTITLEAREA","AUTHOR","TIME","BUTTONAREA","R6Post","disposeBag","DisposeBag","reactor","commentInput","createRef","getState","disposeOf","distinctUntilChanged","subscribe","dispatch","isLoading","setState","prev","curr","_","isEqual","skip","unsubscribe","comment","index","key","fromNow","createdTime","commentsReactorList","Segment","Placeholder","Header","Line","Paragraph","author","title","console","log","initialValue","dividing","length","Form","TextArea","placeholder","ref","Button","labelPosition","icon","color","disabled","onClick","current","Fragment","PureComponent","withRouter"],"mappings":"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","file":"static/js/6.0835e004.chunk.js","sourcesContent":["import { ajax, AjaxResponse } from \"rxjs/ajax\";\nimport { Observable } from \"rxjs\";\nimport { map } from \"rxjs/operators\";\n\n\n\nexport default class R6Ajax {\n\n    static instance : R6Ajax | null = null;\n    \n    static createInstance() {\n        var object = new R6Ajax();\n        return object;\n    }\n\n    static get shared() {\n        if (!R6Ajax.instance) {\n            R6Ajax.instance = R6Ajax.createInstance();\n        }\n        return R6Ajax.instance;\n    }\n\n    accessToken? : string = \"eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ0ZXN0LWFjY291bnQiLCJpYXQiOjE1OTY1ODk2ODIsImV4cCI6MTU5NjY3NjA4Mn0.ETUR_vF_LDuPk4opbrAqs5EcV8oiYVp7gqOZO0AnKHI\"\n    baseUrl = \"http://r6-search.me\"\n    baseURLWithAPIVersion = this.baseUrl + \"/api/c/\" \n\n    id?: string;\n    pwd?: string;\n\n    /**\n     * 세가지경우.\n     * id, pwd가 메모리에 있는경우.\n     * id, pwd가 메모리에 없는 경우. accessToken\n     * accessToken이 없는경우, refresh Token 요청.\n     */\n\n    signIn(id: string, pwd: string) : Observable<string> {\n        const {href} = new URL(`/signin`, this.baseURLWithAPIVersion);\n        return ajax.post(href, { password : pwd, username: id }, {\n            \"Content-Type\": \"application/json\"\n        }).pipe( map( value => {\n            this.id = id;\n            this.pwd = pwd;\n            this.accessToken = value.response.jwtToken;\n            return value.response.jwtToken\n        }))\n    }\n\n    /** updateAccessToken */\n\n    updateAccessToken(id: string, pwd: string): Observable<string>{\n        //refreshtoke으로 다시요청한다. (id, pwd는 저장하지않는다...)\n        const {href} = new URL(`/signin`, this.baseUrl);\n        return ajax.post(href, { password : pwd, username: id }, {\n            \"Content-Type\": \"application/json\"\n        }).pipe( map( value => value.response.jwtToken ))\n    }\n\n\n    /** Wrapper */\n    post(url: string, body? : any | HTMLFormElement, headers?:Object | \"json\" | \"multipart\", withAccessToken: boolean = false) : Observable<AjaxResponse> {\n        const {href} = new URL(url, this.baseURLWithAPIVersion);\n        //accessToken\n        //image to binary file => \n        return ajax.post(href, body, this.getHeader(headers, withAccessToken))\n        // if there is no accesstoken -> do update call..\n        //access -> update JSON.\n        // try to access -> 403 fail -> access token update...\n    }\n\n    getJson<T>(url: string, headers?: Object | \"json\" | \"multipart\") : Observable<T> {\n        const {href} = new URL(url, this.baseURLWithAPIVersion);\n        return ajax.getJSON(href, this.getHeader(headers, false))\n    }\n\n\n    // Helper\n    getHeader(headers: Object | \"json\" | \"multipart\" | undefined , withAccessToken: boolean) {\n        let header = {} as any;\n        switch( headers ){\n            case \"json\":\n                header = {\"Content-Type\": \"application/json\"}\n                break;\n            case \"multipart\":\n                // header = {\"Content-Type\": \"multipart/form-data\"}\n                break;\n            default:\n                if (headers) {\n                } else {\n                    header = headers\n                }\n        }\n        \n        if (this.accessToken && withAccessToken) {\n            header[\"Authorization\"] = `Bearer ${this.accessToken}`\n            return header\n        } else {\n            return header\n        }\n    }\n\n\n\n}","import _extends from \"@babel/runtime/helpers/extends\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, useKeyOnly } from '../../lib';\n/**\n * A comment can contain an action.\n */\n\nfunction CommentAction(props) {\n  var active = props.active,\n      className = props.className,\n      children = props.children,\n      content = props.content;\n  var classes = cx(useKeyOnly(active, 'active'), className);\n  var rest = getUnhandledProps(CommentAction, props);\n  var ElementType = getElementType(CommentAction, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nCommentAction.handledProps = [\"active\", \"as\", \"children\", \"className\", \"content\"];\nCommentAction.defaultProps = {\n  as: 'a'\n};\nCommentAction.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Style as the currently active action. */\n  active: PropTypes.bool,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand\n} : {};\nexport default CommentAction;","import _extends from \"@babel/runtime/helpers/extends\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps } from '../../lib';\n/**\n * A comment can contain an list of actions a user may perform related to this comment.\n */\n\nfunction CommentActions(props) {\n  var className = props.className,\n      children = props.children,\n      content = props.content;\n  var classes = cx('actions', className);\n  var rest = getUnhandledProps(CommentActions, props);\n  var ElementType = getElementType(CommentActions, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nCommentActions.handledProps = [\"as\", \"children\", \"className\", \"content\"];\nCommentActions.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand\n} : {};\nexport default CommentActions;","import _extends from \"@babel/runtime/helpers/extends\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps } from '../../lib';\n/**\n * A comment can contain an author.\n */\n\nfunction CommentAuthor(props) {\n  var className = props.className,\n      children = props.children,\n      content = props.content;\n  var classes = cx('author', className);\n  var rest = getUnhandledProps(CommentAuthor, props);\n  var ElementType = getElementType(CommentAuthor, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nCommentAuthor.handledProps = [\"as\", \"children\", \"className\", \"content\"];\nCommentAuthor.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand\n} : {};\nexport default CommentAuthor;","import _extends from \"@babel/runtime/helpers/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { createHTMLImage, getElementType, getUnhandledProps, htmlImageProps, partitionHTMLProps } from '../../lib';\n/**\n * A comment can contain an image or avatar.\n */\n\nfunction CommentAvatar(props) {\n  var className = props.className,\n      src = props.src;\n  var classes = cx('avatar', className);\n  var rest = getUnhandledProps(CommentAvatar, props);\n\n  var _partitionHTMLProps = partitionHTMLProps(rest, {\n    htmlProps: htmlImageProps\n  }),\n      _partitionHTMLProps2 = _slicedToArray(_partitionHTMLProps, 2),\n      imageProps = _partitionHTMLProps2[0],\n      rootProps = _partitionHTMLProps2[1];\n\n  var ElementType = getElementType(CommentAvatar, props);\n  return React.createElement(ElementType, _extends({}, rootProps, {\n    className: classes\n  }), createHTMLImage(src, {\n    autoGenerateKey: false,\n    defaultProps: imageProps\n  }));\n}\n\nCommentAvatar.handledProps = [\"as\", \"className\", \"src\"];\nCommentAvatar.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Specifies the URL of the image. */\n  src: PropTypes.string\n} : {};\nexport default CommentAvatar;","import _extends from \"@babel/runtime/helpers/extends\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps } from '../../lib';\n/**\n * A comment can contain content.\n */\n\nfunction CommentContent(props) {\n  var className = props.className,\n      children = props.children,\n      content = props.content;\n  var classes = cx(className, 'content');\n  var rest = getUnhandledProps(CommentContent, props);\n  var ElementType = getElementType(CommentContent, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nCommentContent.handledProps = [\"as\", \"children\", \"className\", \"content\"];\nCommentContent.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand\n} : {};\nexport default CommentContent;","import _extends from \"@babel/runtime/helpers/extends\";\nimport _without from \"lodash/without\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly } from '../../lib';\n/**\n * Comments can be grouped.\n */\n\nfunction CommentGroup(props) {\n  var className = props.className,\n      children = props.children,\n      collapsed = props.collapsed,\n      content = props.content,\n      minimal = props.minimal,\n      size = props.size,\n      threaded = props.threaded;\n  var classes = cx('ui', size, useKeyOnly(collapsed, 'collapsed'), useKeyOnly(minimal, 'minimal'), useKeyOnly(threaded, 'threaded'), 'comments', className);\n  var rest = getUnhandledProps(CommentGroup, props);\n  var ElementType = getElementType(CommentGroup, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nCommentGroup.handledProps = [\"as\", \"children\", \"className\", \"collapsed\", \"content\", \"minimal\", \"size\", \"threaded\"];\nCommentGroup.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Comments can be collapsed, or hidden from view. */\n  collapsed: PropTypes.bool,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** Comments can hide extra information unless a user shows intent to interact with a comment. */\n  minimal: PropTypes.bool,\n\n  /** Comments can have different sizes. */\n  size: PropTypes.oneOf(_without(SUI.SIZES, 'medium')),\n\n  /** A comment list can be threaded to showing the relationship between conversations. */\n  threaded: PropTypes.bool\n} : {};\nexport default CommentGroup;","import _extends from \"@babel/runtime/helpers/extends\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps } from '../../lib';\n/**\n * A comment can contain metadata about the comment, an arbitrary amount of metadata may be defined.\n */\n\nfunction CommentMetadata(props) {\n  var className = props.className,\n      children = props.children,\n      content = props.content;\n  var classes = cx('metadata', className);\n  var rest = getUnhandledProps(CommentMetadata, props);\n  var ElementType = getElementType(CommentMetadata, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nCommentMetadata.handledProps = [\"as\", \"children\", \"className\", \"content\"];\nCommentMetadata.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand\n} : {};\nexport default CommentMetadata;","import _extends from \"@babel/runtime/helpers/extends\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps } from '../../lib';\n/**\n * A comment can contain text.\n */\n\nfunction CommentText(props) {\n  var className = props.className,\n      children = props.children,\n      content = props.content;\n  var classes = cx(className, 'text');\n  var rest = getUnhandledProps(CommentText, props);\n  var ElementType = getElementType(CommentText, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nCommentText.handledProps = [\"as\", \"children\", \"className\", \"content\"];\nCommentText.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand\n} : {};\nexport default CommentText;","import _extends from \"@babel/runtime/helpers/extends\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, useKeyOnly } from '../../lib';\nimport CommentAction from './CommentAction';\nimport CommentActions from './CommentActions';\nimport CommentAuthor from './CommentAuthor';\nimport CommentAvatar from './CommentAvatar';\nimport CommentContent from './CommentContent';\nimport CommentGroup from './CommentGroup';\nimport CommentMetadata from './CommentMetadata';\nimport CommentText from './CommentText';\n/**\n * A comment displays user feedback to site content.\n */\n\nfunction Comment(props) {\n  var className = props.className,\n      children = props.children,\n      collapsed = props.collapsed,\n      content = props.content;\n  var classes = cx(useKeyOnly(collapsed, 'collapsed'), 'comment', className);\n  var rest = getUnhandledProps(Comment, props);\n  var ElementType = getElementType(Comment, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nComment.handledProps = [\"as\", \"children\", \"className\", \"collapsed\", \"content\"];\nComment.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Comment can be collapsed, or hidden from view. */\n  collapsed: PropTypes.bool,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand\n} : {};\nComment.Author = CommentAuthor;\nComment.Action = CommentAction;\nComment.Actions = CommentActions;\nComment.Avatar = CommentAvatar;\nComment.Content = CommentContent;\nComment.Group = CommentGroup;\nComment.Metadata = CommentMetadata;\nComment.Text = CommentText;\nexport default Comment;","import _extends from \"@babel/runtime/helpers/extends\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, useKeyOnly } from '../../lib';\n/**\n * A divider visually segments content into groups.\n */\n\nfunction Divider(props) {\n  var children = props.children,\n      className = props.className,\n      clearing = props.clearing,\n      content = props.content,\n      fitted = props.fitted,\n      hidden = props.hidden,\n      horizontal = props.horizontal,\n      inverted = props.inverted,\n      section = props.section,\n      vertical = props.vertical;\n  var classes = cx('ui', useKeyOnly(clearing, 'clearing'), useKeyOnly(fitted, 'fitted'), useKeyOnly(hidden, 'hidden'), useKeyOnly(horizontal, 'horizontal'), useKeyOnly(inverted, 'inverted'), useKeyOnly(section, 'section'), useKeyOnly(vertical, 'vertical'), 'divider', className);\n  var rest = getUnhandledProps(Divider, props);\n  var ElementType = getElementType(Divider, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nDivider.handledProps = [\"as\", \"children\", \"className\", \"clearing\", \"content\", \"fitted\", \"hidden\", \"horizontal\", \"inverted\", \"section\", \"vertical\"];\nDivider.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Divider can clear the content above it. */\n  clearing: PropTypes.bool,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** Divider can be fitted without any space above or below it. */\n  fitted: PropTypes.bool,\n\n  /** Divider can divide content without creating a dividing line. */\n  hidden: PropTypes.bool,\n\n  /** Divider can segment content horizontally. */\n  horizontal: PropTypes.bool,\n\n  /** Divider can have its colours inverted. */\n  inverted: PropTypes.bool,\n\n  /** Divider can provide greater margins to divide sections of content. */\n  section: PropTypes.bool,\n\n  /** Divider can segment content vertically. */\n  vertical: PropTypes.bool\n} : {};\nexport default Divider;","// const SUBMITREPLY = \"SUBMITREPLY\"\nimport {Reactor} from 'reactivex-redux'\nimport { CommentType, ContentType, PostListType } from \"../../../../../Util/Entity\"\nimport { Observable, concat, of, forkJoin } from 'rxjs'\nimport { ajax } from 'rxjs/ajax'\nimport { map , concatMap, flatMap, tap } from 'rxjs/operators'\nimport R6Ajax from '../../../../../Library/R6Ajax'\n\nconst CLICKREPLY = \"CLICKREPLY\"\nconst CLICKREPLYREPLY = \"CLICKREPLYREPLY\"\n\ninterface CLICKREPLY {\n    type : typeof CLICKREPLY\n    content : string,\n    postId: number,\n}\n\ninterface CLICKREPLYREPLY {\n    type : typeof CLICKREPLYREPLY\n    content : string,\n    postId: number,\n    parentCommentId: number,\n}\n\nexport type PostAction = CLICKREPLY | CLICKREPLYREPLY\n\nconst UPLOADREPLY = \"UPLOADREPLY\"\nconst SETLOADING = \"SETLOADING\"\n\ninterface UPLOADREPLY {\n    type : typeof UPLOADREPLY\n    commentsList : CommentType[],\n}\n\ninterface SETLOADING {\n    type : typeof SETLOADING\n    loading: boolean;\n}\n\n\nexport type PostMutation = UPLOADREPLY | SETLOADING\n\nexport interface PostState {\n    commentsList: CommentType[]\n    commentIsLoading: boolean;\n    commentIsError:boolean;\n}\n\nexport const PostInitialState : PostState = {\n    commentsList: [],\n    commentIsLoading: false,\n    commentIsError:false,\n}\n\n\nexport default class PostReactor extends Reactor<PostAction, PostState, PostMutation> {\n\n    mutate(action: PostAction): Observable<PostMutation> {\n\n        switch(action.type) {\n            case \"CLICKREPLY\":\n                return concat(\n                    of<PostMutation>({type:\"SETLOADING\", loading: true}),\n                    this.postComment(action.postId, action.content).pipe(\n                        flatMap( res => this.updateComment(action.postId).pipe(\n                            map<any, PostMutation>( res => ({type:\"UPLOADREPLY\", commentsList : res}))\n                        ))\n                    ),\n                    of<PostMutation>({type:\"SETLOADING\", loading: false}),\n                )\n            case \"CLICKREPLYREPLY\":\n                return concat(\n                    of<PostMutation>({type:\"SETLOADING\", loading: true}),\n                    this.postComment(action.postId, action.content, action.parentCommentId).pipe(\n                        flatMap( res => this.updateComment(action.postId).pipe(\n                            map<any, PostMutation>( res => ({type:\"UPLOADREPLY\", commentsList : res}))\n                        ))\n                    ),\n                    of<PostMutation>({type:\"SETLOADING\", loading: false}),\n                )\n            }\n    }\n    reduce(state: PostState, mutation: PostMutation): PostState {\n        let newState = state;\n        switch(mutation.type) {\n\n            case \"UPLOADREPLY\":\n                newState.commentsList = mutation.commentsList;\n                return newState;\n\n            case \"SETLOADING\":\n                newState.commentIsLoading = mutation.loading;\n                return newState;\n        }\n    }\n\n    updateComment(postId: number): Observable<CommentType[]> {\n        return R6Ajax.shared.getJson<ContentType>(`post/${postId}`).pipe(\n            map(res => res.commentList )\n        )\n    }\n\n    postComment(postId: number, content: string, parentCommentId?: number){  \n        if (parentCommentId) {\n            return R6Ajax.shared.post('comment', {content: content, postId: postId, parentCommentId: parentCommentId}, \"json\", true)\n        } else {\n            return R6Ajax.shared.post('comment', {content: content, postId: postId}, \"json\", true)\n        }\n    }\n\n}","import React from \"react\";\nimport ForumReactor, { ForumState, ForumReactorProps, ForumReactorProp, ForumStateInitialState } from \"../../../../@0ForumReactor/ForumReactor\";\nimport styled from \"styled-components\";\nimport { Viewer } from '@toast-ui/react-editor'\nimport { withReactor, deepDistinctUntilChanged, DisposeBag } from 'reactivex-redux'\nimport { Placeholder, Segment, Image, Header, Divider, Comment, Form, Button, TextArea } from \"semantic-ui-react\";\nimport '@toast-ui/editor/dist/toastui-editor-viewer.css';\nimport './R6Post.css';\nimport Moment from \"react-moment\";\nimport { CommentType } from \"../../../../../Util/Entity\";\nimport PostReactor, { PostInitialState, PostState } from \"./R6PostReactor\";\nimport { skip, distinctUntilChanged, map } from \"rxjs/operators\";\nimport _ from \"lodash\";\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\nimport { interval } from \"rxjs\";\n\nconst POSTAREA = styled.div`\n    position: relative;\n    background: #fff;\n    box-shadow: 0 1px 2px 0 rgba(34,36,38,.15);\n    margin: 1rem 0;\n    padding: 2em 2em;\n    border-radius: .28571429rem;\n    border: 1px solid rgba(34,36,38,.15);\n`\n\nconst VIEWERAREA = styled.div`\n    min-height:400px;\n    overflow-y:hidden;\n    word-break:break-all;\n`\n\nconst SUBTITLEAREA = styled.div`\n    display:flex;\n    flex-direction:row;\n    font-size:1.1rem;\n`\n\nconst AUTHOR = styled.div`\n    font-weight:bold;\n    margin-right:0.8em;\n\n`\n\nconst TIME = styled.div`\n    font-size:1rem;\n    color:#A9A9A9;\n`\n\nconst BUTTONAREA = styled.div`\n    display:flex;\n    justify-content: flex-end;\n    margin-top:10px;\n`\n\n\n//goback...\nclass R6Post extends React.PureComponent<ForumReactorProp & RouteComponentProps, ForumState & PostState> {\n\n    disposeBag: DisposeBag | null = new DisposeBag();\n    reactor : PostReactor;\n    commentInput = React.createRef<TextArea>();\n\n    constructor(props:any) {\n        super(props)\n        this.reactor = new PostReactor(PostInitialState);\n        this.state = { ...this.props.reactor.getState() , ...PostInitialState}\n    }\n\n    componentDidMount() {\n\n        this.disposeBag!.disposeOf = this.props.reactor.state.pipe(\n            map( res => res.postId ),\n            distinctUntilChanged(),\n        ).subscribe(\n            postId => this.props.reactor.dispatch({type:\"CLICKPOST\", postId: postId!})\n        )\n\n        this.disposeBag!.disposeOf = this.props.reactor.state.pipe(\n            map( res => res.isLoading ),\n            distinctUntilChanged(),\n        ).subscribe(\n            isLoading => {\n                this.setState({isLoading})\n            }\n        )\n\n        this.disposeBag!.disposeOf = this.props.reactor.state.pipe(\n            map( res => ({ post: res.post})),\n            distinctUntilChanged( ( prev, curr) => _.isEqual(prev.post, curr.post)),\n            skip(1),\n        ).subscribe(\n            res => this.setState({ post : res.post})\n        )        \n\n        this.disposeBag!.disposeOf = this.props.reactor.state.pipe(\n            map( res => ({ post: res.post})),\n            distinctUntilChanged( ( prev, curr) => _.isEqual(prev.post, curr.post)),\n            skip(1),\n        ).subscribe(\n            res => this.setState({ post : res.post})\n        )        \n\n\n        this.disposeBag!.disposeOf = this.reactor.state.pipe( \n            map( res=> res.commentIsLoading ),\n            distinctUntilChanged(_.isEqual),\n            skip(1),\n        ).subscribe(\n            commentIsLoading => this.setState({ commentIsLoading })\n        )\n\n        this.disposeBag!.disposeOf = this.reactor.state.pipe( \n            map( res=> res.commentIsError ),\n            distinctUntilChanged(_.isEqual),\n            skip(1),\n        ).subscribe(\n            commentIsError => this.setState({ commentIsError })\n        )\n\n        this.disposeBag!.disposeOf = this.reactor.state.pipe( \n            map( res=> res.commentsList ),\n            distinctUntilChanged(_.isEqual),\n            skip(1),\n        ).subscribe(\n            commentsList => this.setState({ commentsList })\n        )\n\n    }\n\n\n    componentWillUnmount(){\n        this.disposeBag?.unsubscribe();\n        this.disposeBag = null;\n    }\n\n    commentList(comment : CommentType[]){\n        return comment.map( (value, index) => {\n            return (\n\n                <Comment key={\"COMMENT_\" + index}>\n                <Comment.Avatar src='https://react.semantic-ui.com/images/avatar/small/matt.jpg' />\n                <Comment.Content>\n                  <Comment.Author as='a'>{value.username}</Comment.Author>\n                  <Comment.Metadata>\n                  <Moment fromNow>{value.createdTime}</Moment>\n                  </Comment.Metadata>\n                  <Comment.Text>{value.content}</Comment.Text>\n                  <Comment.Actions>\n                    <Comment.Action>Reply</Comment.Action>\n                  </Comment.Actions>\n                </Comment.Content>\n              </Comment>\n              )\n        })\n    }\n\n    render(){\n    \n        // const { author, title, content, commentList, createdTime , postId } = this.state;\n        const { isLoading , post } = this.state;\n        const commentsReactorList = this.state.commentsList;\n\n        if (isLoading || !post ) {\n            return (\n                <Segment loading>\n                    <Placeholder>\n                        <Placeholder.Header>\n                        <Placeholder.Line />\n                        <Placeholder.Line />\n                        </Placeholder.Header>\n                        <Placeholder.Paragraph>\n                        <Placeholder.Line />\n                        <Placeholder.Line />\n                        <Placeholder.Line />\n                        <Placeholder.Line />\n                        </Placeholder.Paragraph>\n                    </Placeholder>\n                 </Segment>\n            \n            )\n        } else {\n            const { author, title, content, commentList, createdTime, postId} = post!\n            const { commentIsLoading } = this.state;\n            console.log(\"comments test\", this.state);\n            return (\n                <>\n                \n                    <POSTAREA key={postId + \"_KEY\"}>\n\n                        <Header size={'huge'}>{title}</Header>\n                        <SUBTITLEAREA>\n                            <AUTHOR>{author}</AUTHOR>\n                            <TIME><Moment fromNow>{createdTime}</Moment></TIME>\n                        </SUBTITLEAREA>\n                        <Divider />\n\n                        <VIEWERAREA>\n                            <Viewer initialValue={content}/>\n                        </VIEWERAREA>\n\n                        <Header as='h2' dividing>\n                            덧글 {commentList.length} 개\n                        </Header>\n                        \n                        <Form>\n                            <TextArea placeholder='Tell us more' ref={ this.commentInput }/>\n                            <BUTTONAREA>\n                            <Button \n                                content='덧글 달기'\n                                labelPosition='left'\n                                icon='edit'\n                                color={\"green\"}\n                                disabled={this.state.commentIsLoading}\n                                loading={this.state.commentIsLoading}\n                                onClick={()=>{this.reactor?.dispatch({type:\"CLICKREPLY\", postId: postId, content:(this.commentInput as any).current.ref.current.value})}}/>\n                            </BUTTONAREA>\n                        </Form>\n\n                        <React.Fragment>\n                            <Comment.Group>\n                                { commentsReactorList.length !== 0 ? this.commentList(commentsReactorList) : this.commentList(commentList) }\n                            </Comment.Group>\n                        </React.Fragment>\n                    </POSTAREA>\n\n                </>\n            )\n            \n        }        \n    }\n}\n\nexport default withRouter(R6Post)\n"],"sourceRoot":""}