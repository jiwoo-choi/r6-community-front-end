{"version":3,"sources":["../node_modules/semantic-ui-react/dist/es/elements/Divider/Divider.js","Component/@2Content/Contents/Post/View/R6PostReactor.tsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","Component/@Reusable-Component/R6TextArea.tsx","Component/@Reusable-Component/R6Comment.tsx","Component/@2Content/Contents/Post/View/R6Post.tsx"],"names":["Divider","props","children","className","clearing","content","fitted","hidden","horizontal","inverted","section","vertical","classes","cx","useKeyOnly","rest","getUnhandledProps","ElementType","getElementType","React","createElement","_extends","childrenUtils","isNil","handledProps","propTypes","PostInitialState","commentsList","commentIsLoading","commentIsError","PostReactor","action","type","concat","of","loading","this","postComment","postId","pipe","flatMap","res","updateComment","map","parentCommentId","state","mutation","newState","R6Ajax","shared","getJson","commentList","post","Reactor","_arrayLikeToArray","arr","len","length","i","arr2","Array","_slicedToArray","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","err","o","minLen","n","prototype","toString","call","slice","constructor","name","from","test","TypeError","TEXTAREA","styled","textarea","R6TextArea","placeholder","textRef","thisTextRef","useRef","useEffect","ref","COMMENTGRID","div","PROFILECONTAINER","CONTENTCONTAINER","CHILDCONTAINER","BUTTONAREA","BUTTONGROUPAREA","CHILDBACKGROUND","R6Comment","isChild","comment","id","onSubmit","useState","setState","Icon","flipped","rotated","style","marginLeft","rank","size","username","Button","icon","color","compact","onClick","childComment","index","key","commentId","defaultProps","POSTAREA","VIEWERAREA","SUBTITLEAREA","AUTHOR","TIME","R6Post","disposeBag","DisposeBag","reactor","commentInput","createRef","getState","disposeOf","distinctUntilChanged","subscribe","dispatch","isLoading","prev","curr","_","isEqual","unsubscribe","console","log","commentsReactorList","Segment","Placeholder","Header","Line","Paragraph","author","title","createdTime","fromNow","initialValue","as","dividing","labelPosition","disabled","isLogined","current","Fragment","PureComponent","withRouter"],"mappings":"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","file":"static/js/6.49a13590.chunk.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/extends\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, useKeyOnly } from '../../lib';\n/**\n * A divider visually segments content into groups.\n */\n\nfunction Divider(props) {\n  var children = props.children,\n      className = props.className,\n      clearing = props.clearing,\n      content = props.content,\n      fitted = props.fitted,\n      hidden = props.hidden,\n      horizontal = props.horizontal,\n      inverted = props.inverted,\n      section = props.section,\n      vertical = props.vertical;\n  var classes = cx('ui', useKeyOnly(clearing, 'clearing'), useKeyOnly(fitted, 'fitted'), useKeyOnly(hidden, 'hidden'), useKeyOnly(horizontal, 'horizontal'), useKeyOnly(inverted, 'inverted'), useKeyOnly(section, 'section'), useKeyOnly(vertical, 'vertical'), 'divider', className);\n  var rest = getUnhandledProps(Divider, props);\n  var ElementType = getElementType(Divider, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nDivider.handledProps = [\"as\", \"children\", \"className\", \"clearing\", \"content\", \"fitted\", \"hidden\", \"horizontal\", \"inverted\", \"section\", \"vertical\"];\nDivider.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Divider can clear the content above it. */\n  clearing: PropTypes.bool,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** Divider can be fitted without any space above or below it. */\n  fitted: PropTypes.bool,\n\n  /** Divider can divide content without creating a dividing line. */\n  hidden: PropTypes.bool,\n\n  /** Divider can segment content horizontally. */\n  horizontal: PropTypes.bool,\n\n  /** Divider can have its colours inverted. */\n  inverted: PropTypes.bool,\n\n  /** Divider can provide greater margins to divide sections of content. */\n  section: PropTypes.bool,\n\n  /** Divider can segment content vertically. */\n  vertical: PropTypes.bool\n} : {};\nexport default Divider;","// const SUBMITREPLY = \"SUBMITREPLY\"\nimport {Reactor} from 'reactivex-redux'\nimport { CommentType, ContentType, PostListType } from \"../../../../../Util/Entity\"\nimport { Observable, concat, of, forkJoin } from 'rxjs'\nimport { ajax } from 'rxjs/ajax'\nimport { map , concatMap, flatMap, tap } from 'rxjs/operators'\nimport R6Ajax from '../../../../../Library/R6Ajax'\n\nconst CLICKREPLY = \"CLICKREPLY\"\nconst CLICKREPLYREPLY = \"CLICKREPLYREPLY\"\n\ninterface CLICKREPLY {\n    type : typeof CLICKREPLY\n    content : string,\n    postId: number,\n}\n\ninterface CLICKREPLYREPLY {\n    type : typeof CLICKREPLYREPLY\n    content : string,\n    postId: number,\n    parentCommentId: number,\n}\n\nexport type PostAction = CLICKREPLY | CLICKREPLYREPLY\n\nconst UPLOADREPLY = \"UPLOADREPLY\"\nconst SETLOADING = \"SETLOADING\"\n\ninterface UPLOADREPLY {\n    type : typeof UPLOADREPLY\n    commentsList : CommentType[],\n}\n\ninterface SETLOADING {\n    type : typeof SETLOADING\n    loading: boolean;\n}\n\n\nexport type PostMutation = UPLOADREPLY | SETLOADING\n\nexport interface PostState {\n    commentsList: CommentType[]\n    commentIsLoading: boolean;\n    commentIsError:boolean;\n}\n\nexport const PostInitialState : PostState = {\n    commentsList: [],\n    commentIsLoading: false,\n    commentIsError:false,\n}\n\n\nexport default class PostReactor extends Reactor<PostAction, PostState, PostMutation> {\n\n    mutate(action: PostAction): Observable<PostMutation> {\n\n        switch(action.type) {\n            case \"CLICKREPLY\":\n                return concat(\n                    of<PostMutation>({type:\"SETLOADING\", loading: true}),\n                    this.postComment(action.postId, action.content).pipe(\n                        flatMap( res => this.updateComment(action.postId).pipe(\n                            map<any, PostMutation>( res => ({type:\"UPLOADREPLY\", commentsList : res}))\n                        ))\n                    ),\n                    of<PostMutation>({type:\"SETLOADING\", loading: false}),\n                )\n            case \"CLICKREPLYREPLY\":\n                return concat(\n                    of<PostMutation>({type:\"SETLOADING\", loading: true}),\n                    this.postComment(action.postId, action.content, action.parentCommentId).pipe(\n                        flatMap( res => this.updateComment(action.postId).pipe(\n                            map<any, PostMutation>( res => ({type:\"UPLOADREPLY\", commentsList : res}))\n                        ))\n                    ),\n                    of<PostMutation>({type:\"SETLOADING\", loading: false}),\n                )\n            }\n    }\n    reduce(state: PostState, mutation: PostMutation): PostState {\n        let newState = state;\n        switch(mutation.type) {\n\n            case \"UPLOADREPLY\":\n                newState.commentsList = mutation.commentsList;\n                return newState;\n\n            case \"SETLOADING\":\n                newState.commentIsLoading = mutation.loading;\n                return newState;\n        }\n    }\n\n    updateComment(postId: number): Observable<CommentType[]> {\n        return R6Ajax.shared.getJson<ContentType>(`post/${postId}`).pipe(\n            map(res => res.commentList )\n        )\n    }\n\n    postComment(postId: number, content: string, parentCommentId?: number){  \n        if (parentCommentId) {\n            return R6Ajax.shared.post('comment', {content: content, postId: postId, parentCommentId: parentCommentId}, \"json\", true)\n        } else {\n            return R6Ajax.shared.post('comment', {content: content, postId: postId}, \"json\", true)\n        }\n    }\n\n}","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(n);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import styled from \"styled-components\"\nimport React, { useRef, useEffect } from \"react\"\n\nconst TEXTAREA = styled.textarea`\nresize: none;\nmargin-bottom: 1rem;\nwidth: 100%;\nmin-height: 6.125rem;\nfont-size: 1rem;\ncolor: rgb(33, 37, 41);\nline-height: 1.75;\npadding: 1rem 1rem 1.5rem;\noutline: none;\nborder-width: 1px;\nborder-style: solid;\nborder-color: rgb(233, 236, 239);\nborder-image: initial;\nborder-radius: 4px;\n`\n\ninterface Props {\n    placeholder? : string\n    textRef?: (ref : React.RefObject<HTMLTextAreaElement> ) => void | (React.RefObject<HTMLTextAreaElement>);\n}\n\nexport default function R6TextArea({placeholder, textRef} : Props) {\n    const thisTextRef = useRef<HTMLTextAreaElement>(null);\n    useEffect( () => {\n        if (textRef) {\n            if (typeof textRef === \"function\") {\n                textRef(thisTextRef)\n            } else {   \n                (textRef as React.RefObject<HTMLTextAreaElement>) = thisTextRef;\n            }\n        }\n    }, [])\n    return <TEXTAREA ref={thisTextRef} placeholder={placeholder}></TEXTAREA>\n\n}","\nimport styled from 'styled-components'\nimport React, { useState } from 'react'\nimport { R6RankIcon } from '.'\nimport { Icon, Button } from 'semantic-ui-react'\nimport R6TextArea from './R6TextArea'\nimport { CommentType } from '../../Util/Entity'\nimport Moment from 'react-moment'\n\n\ninterface Props {\n    /** childComment 여부. 재귀호출 */\n    /** 덧글 내용 */\n    comment: CommentType;\n    /** 수정가능한지 */\n    isEditable?: boolean;\n    /** 답글창이 열려있는지 */\n    isReplying?: boolean;\n    /** 날짜 */\n    date?: string;\n    /** 아이디 */\n    id?: string;\n    /** 프로필 */\n    profile?: string;\n    /** parent */\n    parentId?: string;\n    /** isBest */\n    isBest?: boolean;\n    isChild: boolean;\n    onSubmit?: (info: any) => void;\n\n}\n\n\n\nconst COMMENTGRID = styled.div`\n    position:relative;\n    display: flex;\n    flex-direction: column;\n    justify-content:flex-end;\n    // border-top: 1px solid #eee;\n    border-bottom: 1px solid #eee;\n    padding: 0px 10px;\n`\n\nconst PROFILECONTAINER = styled.div`\n    display:flex;\n    align-items:center;\n    flex-basis:40px;\n    max-height:40px;\n\n\n    #profile {\n        font-weight:bold;\n        margin-right:10px;\n        margin-left:-5px;\n    }\n\n    #id {\n        font-weight: bold;\n        margin-right:10px;\n        font-size:1.2rem;\n    }\n\n    #time {\n        color : #A9A9A9;\n    }\n`\n\nconst CONTENTCONTAINER = styled.div`\n    display:flex;\n    flex-grow:1;\n    padding-top:10px;\n    padding-bottom:10px;\n    max-height:120px;\n    align-items:center;\n`\n\nconst CHILDCONTAINER = styled.div`\n`\n\nconst BUTTONAREA = styled.div`\n    display:flex;\n    flex-basis:40px;\n    max-height:40px;\n    align-items:center;\n`\n\nconst BUTTONGROUPAREA = styled.div`\n    display:flex;\n    justify-content:flex-end;\n    // margin-bottom: 1rem;\n`\n\nconst CHILDBACKGROUND = styled.div`\n    background-color: rgba(0, 0, 0, 0.016);\n    margin-top: 1.3125rem;\n    border-width: 1px;\n    border-style: solid;\n    border-color: rgba(0, 0, 0, 0.02);\n    border-image: initial;\n    padding: 1rem;\n    border-radius: 4px;\n`\n\n\nexport default function R6Comment({ isChild, id, comment , onSubmit} : Props) {\n\n    const [state, setState] = useState(false);\n    //comment group에서 관리해줘야함. setState에 대한 listenr를 막기위함.\n    //group에서 state를 관리할 수 있는 방법도있음. 열어줄지 안열어줄지..\n    //각자 state를 관리하기?\n    //답글달기 추가하기.\n    \n    return (\n        <COMMENTGRID>\n\n            <PROFILECONTAINER>\n                { isChild && <Icon name={\"level up alternate\"} flipped={\"vertically\"} rotated={\"clockwise\"}></Icon>}\n                <R6RankIcon style={{marginLeft:\"-5px\"}} rank={\"SILVER_I\"} size={30}></R6RankIcon>\n                <div id=\"id\">{comment.username}</div>\n                {/* <Moment>{ props => <span id=\"time\">{comment.createdTime}</span>}</Moment> */}\n            </PROFILECONTAINER>\n            <CONTENTCONTAINER>\n                {comment.content}\n            </CONTENTCONTAINER>\n\n            { !isChild && \n                <BUTTONAREA>\n                    <Button icon color={\"black\"} size={\"mini\"} compact onClick={()=>{setState(!state)}}>\n                            <Icon name={\"reply\"}></Icon>\n                            &nbsp; 답글달기\n                    </Button>\n                </BUTTONAREA>\n            }\n            {\n                state && \n                <CHILDBACKGROUND>\n\n                    <R6TextArea placeholder={`${comment.username} 에게 덧글 달기..` }/>\n\n                    <BUTTONGROUPAREA>\n                        <Button color={\"green\"} size={\"small\"} compact onClick={onSubmit}>\n                                    작성하기\n                        </Button>\n                        <Button color={\"grey\"} size={\"small\"} compact onClick={()=>setState(false)}>\n                                    취소\n                        </Button>\n                    </BUTTONGROUPAREA>\n                </CHILDBACKGROUND>\n            }\n\n            <CHILDCONTAINER>\n                {\n                    comment.childComment.map( (value, index) => {\n                        return <R6Comment isChild={true} comment={value} key={comment.commentId+index+\"_CHILD_COMMENT\"}></R6Comment>\n                    })\n                }\n            </CHILDCONTAINER>\n\n        </COMMENTGRID>\n    )\n}\n\nR6Comment.defaultProps = {\n    isChild : false\n}","import React from \"react\";\nimport ForumReactor, { ForumState, ForumReactorProps, ForumReactorProp, ForumStateInitialState } from \"../../../../@0ForumReactor/ForumReactor\";\nimport styled from \"styled-components\";\nimport { Viewer } from '@toast-ui/react-editor'\nimport { withReactor, deepDistinctUntilChanged, DisposeBag } from 'reactivex-redux'\nimport { Placeholder, Segment, Image, Header, Divider, Comment, Form, Button, TextArea } from \"semantic-ui-react\";\nimport '@toast-ui/editor/dist/toastui-editor-viewer.css';\nimport './R6Post.css';\nimport Moment from \"react-moment\";\nimport { CommentType } from \"../../../../../Util/Entity\";\nimport PostReactor, { PostInitialState, PostState } from \"./R6PostReactor\";\nimport { skip, distinctUntilChanged, map } from \"rxjs/operators\";\nimport _ from \"lodash\";\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\nimport { interval } from \"rxjs\";\nimport R6Comment from \"../../../../@Reusable-Component/R6Comment\";\nimport R6TextArea from \"../../../../@Reusable-Component/R6TextArea\";\n\nconst POSTAREA = styled.div`\n    position: relative;\n    background: #fff;\n    box-shadow: 0 1px 2px 0 rgba(34,36,38,.15);\n    margin: 1rem 0;\n    padding: 2em 2em;\n    border-radius: .28571429rem;\n    border: 1px solid rgba(34,36,38,.15);\n`\n\nconst VIEWERAREA = styled.div`\n    min-height:400px;\n    overflow-y:hidden;\n    word-break:break-all;\n`\n\nconst SUBTITLEAREA = styled.div`\n    display:flex;\n    flex-direction:row;\n    font-size:1.1rem;\n`\n\nconst AUTHOR = styled.div`\n    font-weight:bold;\n    margin-right:0.8em;\n\n`\n\nconst TIME = styled.div`\n    font-size:1rem;\n    color:#A9A9A9;\n`\n\nconst BUTTONAREA = styled.div`\n    display:flex;\n    justify-content: flex-end;\n`\n\n\n//goback...\nclass R6Post extends React.PureComponent<ForumReactorProp & RouteComponentProps, ForumState & PostState> {\n\n    disposeBag: DisposeBag | null = new DisposeBag();\n    reactor : PostReactor;\n    commentInput = React.createRef<HTMLTextAreaElement>();\n\n    constructor(props:any) {\n        super(props)\n        this.reactor = new PostReactor(PostInitialState);\n        this.state = { ...this.props.reactor.getState() , ...PostInitialState}\n    }\n\n    componentDidMount() {\n\n        this.disposeBag!.disposeOf = this.props.reactor.state.pipe(\n            map( res => res.postId ),\n            distinctUntilChanged(),\n        ).subscribe(\n            postId => this.props.reactor.dispatch({type:\"CLICKPOST\", postId: postId!})\n        )\n\n        this.disposeBag!.disposeOf = this.props.reactor.state.pipe(\n            map( res => res.isLoading ),\n            distinctUntilChanged(),\n        ).subscribe(\n            isLoading => {\n                this.setState({isLoading})\n            }\n        )\n\n        this.disposeBag!.disposeOf = this.props.reactor.state.pipe(\n            map( res => ({ post: res.post})),\n            distinctUntilChanged( ( prev, curr) => _.isEqual(prev.post, curr.post)),\n        ).subscribe(\n            res => this.setState({ post : res.post})\n        )        \n\n        this.disposeBag!.disposeOf = this.props.reactor.state.pipe(\n            map( res => ({ post: res.post})),\n            distinctUntilChanged( ( prev, curr) => _.isEqual(prev.post, curr.post)),\n        ).subscribe(\n            res => this.setState({ post : res.post})\n        )        \n\n\n        this.disposeBag!.disposeOf = this.reactor.state.pipe( \n            map( res=> res.commentIsLoading ),\n            distinctUntilChanged(_.isEqual),\n        ).subscribe(\n            commentIsLoading => this.setState({ commentIsLoading })\n        )\n\n        this.disposeBag!.disposeOf = this.reactor.state.pipe( \n            map( res=> res.commentIsError ),\n            distinctUntilChanged(_.isEqual),\n        ).subscribe(\n            commentIsError => this.setState({ commentIsError })\n        )\n\n        this.disposeBag!.disposeOf = this.reactor.state.pipe( \n            map( res=> res.commentsList ),\n            distinctUntilChanged(_.isEqual),\n        ).subscribe(\n            commentsList => this.setState({ commentsList })\n        )\n\n    }\n\n\n    componentWillUnmount(){\n        this.disposeBag?.unsubscribe();\n        this.disposeBag = null;\n    }\n\n    commentList(comment : CommentType[]){\n        console.log(comment.map( (value, index) => {\n            return (\n                <R6Comment key={index+\"_COMMENT\"} comment={value}></R6Comment>\n              )\n        }))\n\n        return comment.map( (value, index) => {\n            return (\n                <R6Comment key={index+\"_COMMENT\"} comment={value}></R6Comment>\n              )\n        })\n    }\n\n    /**\n     * \n                <Comment key={\"COMMENT_\" + index}>\n                <Comment.Avatar src='https://react.semantic-ui.com/images/avatar/small/matt.jpg' />\n                <Comment.Content>\n                  <Comment.Author as='a'>{value.username}</Comment.Author>\n                  <Comment.Metadata>\n                  <Moment fromNow>{value.createdTime}</Moment>\n                  </Comment.Metadata>\n                  <Comment.Text>{value.content}</Comment.Text>\n                  <Comment.Actions>\n                    <Comment.Action>Reply</Comment.Action>\n                  </Comment.Actions>\n                </Comment.Content>\n              </Comment>\n     */\n    render(){\n    \n        // const { author, title, content, commentList, createdTime , postId } = this.state;\n        const { isLoading , post } = this.state;\n        const commentsReactorList = this.state.commentsList;\n\n        if (isLoading || !post ) {\n            return (\n                <Segment loading>\n                    <Placeholder>\n                        <Placeholder.Header>\n                        <Placeholder.Line />\n                        <Placeholder.Line />\n                        </Placeholder.Header>\n                        <Placeholder.Paragraph>\n                        <Placeholder.Line />\n                        <Placeholder.Line />\n                        <Placeholder.Line />\n                        <Placeholder.Line />\n                        </Placeholder.Paragraph>\n                    </Placeholder>\n                 </Segment>\n            \n            )\n        } else {\n            const { author, title, content, commentList, createdTime, postId} = post!\n            const { commentIsLoading } = this.state;\n            console.log(\"comments test\", this.state);\n            return (\n                <>\n                \n                    <POSTAREA key={postId + \"_KEY\"}>\n\n                        <Header size={'huge'}>{title}</Header>\n                        <SUBTITLEAREA>\n                            <AUTHOR>{author}</AUTHOR>\n                            <TIME><Moment fromNow>{createdTime}</Moment></TIME>\n                        </SUBTITLEAREA>\n                        <Divider />\n\n                        <VIEWERAREA>\n                            <Viewer initialValue={content}/>\n                        </VIEWERAREA>\n\n                        <Header as='h2' dividing>\n                            덧글 {commentList.length} 개\n                        </Header>\n                        \n\n                        <R6TextArea placeholder='덧글을 입력해주세요' textRef={ (ref) => this.commentInput = ref }/>\n                        <BUTTONAREA>\n                            <Button \n                                content='덧글 달기'\n                                labelPosition='left'\n                                icon='edit'\n                                color={\"green\"}\n                                disabled={this.state.commentIsLoading}\n                                loading={this.state.commentIsLoading}\n                                onClick={()=>{\n                                    \n                                    const {isLogined} = this.props.reactor.getState();\n                                    if (isLogined) {\n                                        this.reactor?.dispatch({type:\"CLICKREPLY\", postId: postId, content:(this.commentInput as any).current.value})\n                                    } else {\n                                        this.props.reactor.dispatch({type:\"CLICKLOGINBUTTON\"})\n                                    }\n                                    \n                                    }}/>\n                            </BUTTONAREA>\n\n                        {/* <Form>\n                            <R6TextArea placeholder='Tell us more' ref={ (ref) => this.commentInput = ref }/>\n                            <BUTTONAREA>\n                            <Button \n                                content='덧글 달기'\n                                labelPosition='left'\n                                icon='edit'\n                                color={\"green\"}\n                                disabled={this.state.commentIsLoading}\n                                loading={this.state.commentIsLoading}\n                                onClick={()=>{\n                                    \n                                    const {isLogined} = this.props.reactor.getState();\n                                    if (isLogined) {\n                                        this.reactor?.dispatch({type:\"CLICKREPLY\", postId: postId, content:(this.commentInput as any).current.ref.current.value})\n                                    } else {\n                                        this.props.reactor.dispatch({type:\"CLICKLOGINBUTTON\"})\n                                    }\n                                    \n                                    }}/>\n                            </BUTTONAREA>\n                        </Form> */}\n                        \n                        <React.Fragment>\n                            {/* <R6Comment comment={commentsReactorList}></R6Comment> */}\n                            { commentsReactorList.length !== 0 ? this.commentList(commentsReactorList) : this.commentList(commentList) }\n                            {/* <Comment.Group>\n                                { commentsReactorList.length !== 0 ? this.commentList(commentsReactorList) : this.commentList(commentList) }\n                            </Comment.Group> */}\n                        </React.Fragment>\n                    </POSTAREA>\n\n                </>\n            )\n            \n        }        \n    }\n}\n\nexport default withRouter(R6Post)\n"],"sourceRoot":""}