{"version":3,"sources":["Component/@2Content/Page404/error.png","Component/@3Footer/R6Footer.tsx","Component/@1Header/R6Button/R6Button.tsx","Component/@1Header/R6Button/R6ButtonGroup.tsx","Component/@1Header/R6Navigation.tsx","Component/@2Content/Page404/Page404.tsx","Library/RxJsExtension.tsx","Data/mockup.tsx","Component/@0ForumReactor/ForumReactor.tsx","Component/@0ForumReactor/R6Forum.tsx","Main.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","FOOTERCONTAINER","styled","footer","FROUMMARGIN","div","HELLO","React","Component","Button","SelectedButton","R6Button","children","selected","onClick","value","ButtonGroup","R6ButtonGroup","onChange","currentValue","func","index","Children","map","child","isValidElement","count","total","childVal","props","cloneElement","inputVal","nav","GLOBALNAV","NAVITEMS","BRANDLOGO","a","SUBNAVITEMS","R6Navigation","url","dispatcher","this","reactor_control","type","newTopic","history","push","topic","getState","Fragment","handleToggle","secondary","compact","bind","withRouter","withReactor","state","STYLED","src","require","color","size","goBack","catchErrorJustReturn","catchError","err","of","listResultMockup","meta","currentPage","totalPage","postList","ForumStateInitialState","isError","isLoading","page","mode","post","undefined","list","isLogined","ForumReactor","action","concat","fetchList","pipe","takeUntil","filter","res","currentState","newPage","fetchPost","postId","tap","console","log","mutation","newState","Object","keys","length","ajax","getJSON","Reactor","ListComponent","lazy","PADDER","Main","reactor","reactorControl","getReactorControl","currentTopic","dispatch","path","exact","key","PureComponent","Boolean","window","location","hostname","match","ReactDOM","render","fallback","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ff97f617.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/error.96fe8c20.png\";","import React from \"react\";\nimport styled from 'styled-components'\n\n//https://cocoder.tistory.com/158\n\nconst FOOTERCONTAINER = styled.footer`\n    background-color:#2C3031;\n    height:300px;\n    width:100%;\n`\n\nconst FROUMMARGIN = styled.div`\n    margin: 0 auto;\n    max-width: 1200px;\n    padding: 50px 1rem;\n`\n\nconst HELLO = styled.div`\n    font-family: 'Anton',sans-serif;\n    font-size: 2.8rem;\n    cursor: none;\n    text-decoration: unset;\n    color: white;\n    opacity:0.3;\n`\n\nexport default class R6Footer extends React.Component {\n    \n    render(){\n        return(\n            <FOOTERCONTAINER>\n                <FROUMMARGIN>\n                    <HELLO> R6-Search Talk </HELLO>\n                    <div> Family Site </div>\n                    <div> R6 Search.me </div>\n                    <div> R6 Search.me </div>\n\n                </FROUMMARGIN>\n            </FOOTERCONTAINER>\n        )\n    }\n\n}","import styled from \"styled-components\";\nimport React from \"react\";\n\n\nconst Button = styled.div`\n\n    font-weight:500;\n    cursor:pointer;\n    transition: 0.2s;\n    color: #BABECC;\n    \n    margin-right: 25px;\n\n    & p {\n        margin: 0;\n        padding:0;\n    }\n\n    & div {\n        height:5px;\n        flex:1;\n        background: #BABECC;\n        border-radius:20px;\n        opacity:0;\n        margin-left: -10px;\n        transition: 0.2s ease-out;\n    }\n\n    &:hover p {\n        font-weight:700;\n        margin-top:-6px;\n    }\n\n    &:hover div {\n        margin-left:0px;\n        opacity:1;\n    }\n`\n\n\nconst SelectedButton = styled.div`\n\n    font-weight:700;\n    color: black;\n    cursor:pointer;\n\n    margin-right: 25px;\n\n    & p {\n        margin: 0;\n        padding:0;\n        margin-top:-6px;\n    }\n\n    & div {\n        flex:1;\n        background:black;\n        height:5px;\n        border-radius:20px;\n        margin : auto 5px;\n        margin-top:3px;\n        background:black;\n    }\n`\n\ninterface ButtonProps {\n    selected?: boolean;\n    onClick?:()=>void;\n    value: string;\n    children: React.ReactNode\n}\n\nexport default function R6Button({children, selected, onClick, value}:ButtonProps) {\n\n    if (selected) {\n        return (\n        <SelectedButton onClick={onClick}>\n            <p>{children}</p>\n            <div></div>\n        </SelectedButton>)\n    } else {\n        return (\n        <Button onClick={onClick}>\n            <p>{children}</p>\n            <div></div>\n        </Button>\n        )\n    }\n}","import React from \"react\";\nimport styled from 'styled-components'\n\nconst ButtonGroup = styled.div`\n\n    display: flex;\n    text-align: center;\n    font-size:2.3rem;\n    \n \n    \n    @media screen and (max-width:820px) {\n        & div {\n            font-size:1.8rem;\n        }\n    }\n\n    @media screen and (max-width:620px) {\n        & div {\n            font-size:1.5rem;\n        }\n    }\n\n\n    @media screen and (max-width:500px) {\n        & div {\n            font-size:1.3rem;\n        }\n    }   \n\n    @media screen and (max-width:400px) {\n        & div {\n            font-size:1rem;\n        }\n    }   \n`\n\n\nfunction map(children : React.ReactNode, func: (child : React.ReactElement, index?:number, total?: number)=>void) {\n    let index = 0;\n    return React.Children.map(children, (child) =>\n      React.isValidElement(child) ? func(child, index++, React.Children.count(children)) : child,\n    );\n}\n\ninterface ButtonGroupProps {\n    onChange?: (inputVal: any) => void;\n    children: React.ReactNode;\n    currentValue: any;\n}\n\nexport default function R6ButtonGroup({onChange, currentValue, children}: ButtonGroupProps) {\n\n    const handleToggles = (inputVal: any) => {\n        if (onChange) {\n            onChange(inputVal)\n        }\n    }\n\n    return(\n            <ButtonGroup>\n                { \n                        map( children, (child, index, total) => {\n                        const { value : childVal } = (child.props)\n                        return React.cloneElement( child , {\n                            onClick : ()=>{handleToggles(childVal)},\n                            selected: currentValue !== null && currentValue === childVal,\n                            value: childVal,\n                        })\n                    })\n                }\n            </ButtonGroup>\n    )\n    \n}\n\n\n\n//withReactor(R6CommunityNavigation, (state) => ({topic: state.topic}))\n/**\n *     dispatcher = this.props.reactor_control.dispatcher;\n\n    render() {\n            const {topic} = this.props.reactor_control.getState();\n\n            return(\n                <div style={{marginBottom:'20px'}}>\n                    <Menu size={\"large\"} compact pointing secondary>\n                        <Menu.Item  \n                            active={topic === \"tips\"}\n                            onClick={this.dispatcher({type:\"CLICKTOPIC\", newTopic:\"tips\"})}\n                        >\n                        <Icon name='gamepad' disabled={topic !== \"tips\"} />\n                        공략/팁 게시판\n                        </Menu.Item>\n                        <Menu.Item  \n                            active={topic === \"clan\"}\n                            onClick={this.dispatcher({type:\"CLICKTOPIC\", newTopic:\"clan\"})}\n                        >\n                        <Icon name='signup' disabled={topic !== \"clan\"} />\n                        클랜 정보 게시판\n                        </Menu.Item>\n                        <Menu.Item\n                            active={topic === \"together\"}\n                            onClick={this.dispatcher({type:\"CLICKTOPIC\", newTopic:\"together\"})}\n                        >\n                        <Icon name='users' disabled={topic !== \"together\"}/>\n                        같이하기\n                        </Menu.Item>\n                        <Menu.Item\n                            active={topic === \"free\"}\n                            onClick={this.dispatcher({type:\"CLICKTOPIC\", newTopic:\"free\"})}\n                        >\n                        <Icon name='list alternate' disabled={topic !== \"free\"} />\n                        자유게시판\n                        </Menu.Item>\n                    </Menu>\n                \n                </div>\n            )\n        }\n\n */","import React from \"react\";\nimport styled from 'styled-components'\nimport { Button } from \"semantic-ui-react\";\nimport { withReactor } from \"reactivex-redux\";\nimport { ForumReactorProps, Topic } from \"../@0ForumReactor/ForumReactor\";\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\nimport { R6Button, R6ButtonGroup } from './R6Button'\n\nconst NAVIGATIONSTYLE = styled.nav`\n    max-width:1200px;\n    height:70px;\n`\n\nconst GLOBALNAV = styled.nav`\n\tposition: relative;\n\ttop: 0;\n\tleft: 0;\n\tz-index: 10;\n\twidth: 100%;\n\theight: 70px;\n`\n\nconst NAVITEMS = styled.div`\n  display: flex;\n  align-items: center;\n  max-width: 1200px;\n  height: 100%;\n  margin: 0 auto;\n  padding: 0 1rem;\n\n`\n\nconst BRANDLOGO = styled.a`\n    font-family: 'Anton', sans-serif;\n    font-size: 2.8rem;\n    color:black;\n    cursor: pointer;\n    text-decoration: unset;\n    margin-right:auto;\n\n    &:hover {\n        color: black;\n    }\n\n    @media only screen and (max-width: 380px) {\n      & {\n        font-size: 1.5rem;\n        }\n\n        & button {\n            font-size: 3.0rem;\n        }\n    }\n\n    @media only screen and (max-width: 600px) {\n\n      & {\n        font-size: 2.0rem;\n      }\n\n        & button {\n            font-size: 1.5rem;\n        }\n\n    }\n`\n\nconst SUBNAVITEMS = styled.div`\n  max-width: 1200px;\n  margin: 0 auto;\n  padding-top: 5rem;\n  padding-left: 1rem;\n`\n\nclass R6Navigation extends React.Component<ForumReactorProps & RouteComponentProps> {\n    \n\n    componentDidMount(){\n        // this.props.history.listen( (value) => {\n        //     //pathname changed, do the request again... :)\n        //     //or not.. we don't have to do that. let's say we cached.\n        // })\n    }\n    \n    handleToggle(value : Topic, url?: string){\n        const dispatcher = this.props.reactor_control.dispatcher;\n        dispatcher({type:\"CLICKTOPIC\", newTopic: value})();\n        if (url) {\n            this.props.history.push(`${url}`)\n        } else {\n            this.props.history.push(`/${value}`)\n        }\n    }\n\n    render(){\n        const { topic } = this.props.reactor_control.getState();\n        // console.log(this.props.reactor_control.getState())\n        return(\n            <React.Fragment>\n                <GLOBALNAV>\n                    <NAVITEMS>\n                        <BRANDLOGO onClick={()=>{this.handleToggle(\"free\", \"/\")}}> R6 Search - TALK </BRANDLOGO>\n                        <Button secondary compact>로그인하기</Button>\n                    </NAVITEMS>\n                </GLOBALNAV>\n\n                <SUBNAVITEMS>\n                        <R6ButtonGroup onChange={this.handleToggle.bind(this)} currentValue={topic}>\n                            <R6Button value={\"free\"}> 자유게시판 </R6Button>\n                            <R6Button value={\"tips\"}> 공략/팁 </R6Button>\n                            <R6Button value={\"together\"}> 같이해요 </R6Button>\n                            <R6Button value={\"clan\"}> 클랜모집 </R6Button>\n                        </R6ButtonGroup>\n                </SUBNAVITEMS>\n            </React.Fragment>\n        )\n    }\n}\n\nexport default withRouter(withReactor(R6Navigation, (state)=>({topic: state.topic})));","\n\nimport React from 'react'\nimport styled from 'styled-components'\nimport { Button } from 'semantic-ui-react'\nimport { BrowserRouterProps, RouteComponentProps, withRouter } from 'react-router-dom'\n\nconst STYLED = styled.div`\n    height: calc(100vh - 70px);\n    display:flex;\n    justify-content:space-evenly;\n    align-items:center;\n    flex-direction: column;\n\n    & img {\n        height : 180px;\n        width: 180px;\n    }\n\n    & div {\n        font-size:1.2rem;\n        font-weight:bold;\n    }\n  \n    @media screen and (max-width: 700px) {\n\n        & img {\n            height:100px;\n            width:100px;\n        }\n\n      }\n\n`\n\nfunction Page404({history} : RouteComponentProps) {\n\n    return (\n        <STYLED>\n            <img src={require('./error.png')}/>\n            <div> 존재하지 않는 페이지 입니다.</div>\n            <Button color={\"black\"} size={\"medium\"} onClick={history.goBack}> 돌아가기 </Button>\n        </STYLED>\n    )\n}\n\nexport default withRouter(Page404);\n","import { Observable, of, empty , MonoTypeOperatorFunction, OperatorFunction, fromEvent, ObservableInput } from \"rxjs\";\nimport { catchError, switchMap, map, distinctUntilChanged, takeUntil, filter } from \"rxjs/operators\";\nimport { AxiosResponse } from \"axios\";\nimport { createRef } from \"react\";\nimport _ from 'lodash'\n\nexport function catchErrorJustReturn<T>(value: T): MonoTypeOperatorFunction<T> {\n    return catchError( err => of(value) )\n}\n\n\nexport function catchErrorReturnEmpty<T>() {\n    return catchError( err => empty() )\n}\n\n\nexport function flatAxiosResultAndCast<T>() : OperatorFunction<AxiosResponse<T>,T> {\n    return function(source: Observable<AxiosResponse<T>>) {\n        return source.pipe( \n            map( (value : AxiosResponse<T>) => {\n                return value.data\n            })\n        )\n    }\n}\n\nexport function deepDistinctUntilChanged() {\n    return distinctUntilChanged(_.isEqual)\n}\n\n\nexport function distinctUntilActionChanged<T>( target: Observable<any>, source: any ) : MonoTypeOperatorFunction<T> {\n    return takeUntil( target.pipe( filter ( res => _.isEqual(res,source))))\n}\n\n\n//array\n//object\n//if it is array\n//if it is object.\n\n\n//liveSearch는??\n//switchMap은 rkqtd\n//\n// export function fromEvent2( ref : React.RefObject<HTMLElement>,  eventName: string) {\n//     return fromEvent( ref.current.el , eventName)\n// }\n//여기서 subscribe //이벤트에서 들어온걸 구독가능합니다.\n//이벤트에서 들어온걸 구독할 숭 ㅣㅆ죠ㅣ.\n\n\n\n// export function Axoisjson<T, R = AxiosResponse<T>>() : OperatorFunction<T, R>{\n//     return input$ => input$.pipe( \n//         map( (value: AxiosResponse<T>) => value.data ),\n//         //if something is not..?\n//         //catchError?\n//     )\n//     //catch Error.\n//     /*\n//     return function(source: Observable<T>) {\n//         return map( (source:any) => { \n//             return source.data\n//         })\n//     }*/\n// }\n\nexport function filterNull<T>(justReturn:T) {\n    return function(source: Observable<T>): Observable<T>{\n        return new Observable<T>( subscriber => {\n            source.subscribe({\n                next(value) {\n                    if (value) {\n                        subscriber.next(value)\n                    } else {\n                        subscriber.next(justReturn)\n                    }\n                }, \n                error(error) {\n                    subscriber.error(error);\n                },\n                complete() {\n                    subscriber.complete();\n                }\n            })\n        })\n    }\n}","import { CommentDataType } from \"../Component/@2Content/Contents/R6Comment\";\nimport { RANKBYREGION, ListType, ContentType, PostListType } from \"../Util/Entity\";\n\nexport const commentMockup : CommentDataType[] = [\n    {\n        id:\"안녕\",\n        content: \"반가워요\",\n        meta: \"어제 2시\"\n    },\n    {\n        id:\"와우\",\n        content: \"진짜요? 바로 갑니다\",\n        meta: \"2015-05-01\"\n    },\n    {\n        id:\"사실?\",\n        content: \"사실임??\",\n        meta: \"어제 2시\"\n    },\n\n]\n    \nexport const searchResultMockUp : RANKBYREGION[]  =  [\n    {\n        region: \"global\",\n        rankStat: {\n            \"maxMmr\": 0,\n            \"death\": 0,\n            \"rank\": 0,\n            \"maxRank\": 0,\n            \"kills\": 0,\n            \"abandons\": 0,\n            \"mmr\": 2500,\n            \"wins\": 0,\n            \"region\": \"ncsa\",\n            \"season\": 17,\n            \"losses\": 0,\n            \"createdTime\": \"2020-05-19T18:19:30.0502837\",\n            \"maxRankString\": \"SILVER_II\",\n            \"rankString\": \"SILVER_II\",\n            nextRankMmr : 100,\n            nextRankString : \"ABC\",                \n        }\n    }\n]\n\n\n\nexport const rankbyregionMockup : RANKBYREGION[] =  \n    [{\n        region: \"global\",\n        rankStat: {\n            \"maxMmr\": 0,\n            \"death\": 0,\n            \"rank\": 0,\n            \"maxRank\": 0,\n            \"kills\": 0,\n            \"abandons\": 0,\n            \"mmr\": 2500,\n            \"wins\": 0,\n            \"region\": \"ncsa\",\n            \"season\": 17,\n            \"losses\": 0,\n            \"createdTime\": \"2020-05-19T18:19:30.0502837\",\n            \"maxRankString\": \"SILVER_II\",\n            \"rankString\": \"SILVER_II\",\n            nextRankMmr : 100,\n            nextRankString : \"ABC\",                \n        }\n    }]\n\n\n\n\n\nexport const listResultMockup : PostListType = \n{ \n    meta: {\n        currentPage : 1,\n        totalPage: 10,\n     },\n     postList : [{\n            \"postId\": 1,\n            \"recommendCnt\": 0, // 추천 수\n            \"viewCnt\": 2, // \n            \"createdTime\": \"2020-01-01T00:00:00\", // 올린 시간 \n            \"title\": \"공지입니다\", // 제목\n            \"author\": \"test1\", // 글쓴 아이디\n            \"hasImg\": true, // 이미지가 존재하는지\n            \"notice\": true // 글이 공지사항인지\n        },\n        {\n            \"postId\": 2,\n            \"recommendCnt\": 0,\n            \"viewCnt\": 0,\n            \"createdTime\": \"2020-01-01T00:00:00\",\n            \"title\": \"title1\",\n            \"author\": \"test1\",\n            \"hasImg\": true,\n            \"notice\": false\n        },{\n            \"postId\": 2,\n            \"recommendCnt\": 0,\n            \"viewCnt\": 0,\n            \"createdTime\": \"2020-01-01T00:00:00\",\n            \"title\": \"title1\",\n            \"author\": \"test1\",\n            \"hasImg\": true,\n            \"notice\": false\n        },{\n            \"postId\": 2,\n            \"recommendCnt\": 0,\n            \"viewCnt\": 0,\n            \"createdTime\": \"2020-01-01T00:00:00\",\n            \"title\": \"title1\",\n            \"author\": \"test1\",\n            \"hasImg\": true,\n            \"notice\": false\n        },{\n            \"postId\": 2,\n            \"recommendCnt\": 0,\n            \"viewCnt\": 0,\n            \"createdTime\": \"2020-01-01T00:00:00\",\n            \"title\": \"title1\",\n            \"author\": \"test1\",\n            \"hasImg\": true,\n            \"notice\": false\n        },{\n            \"postId\": 2,\n            \"recommendCnt\": 0,\n            \"viewCnt\": 0,\n            \"createdTime\": \"2020-01-01T00:00:00\",\n            \"title\": \"title1\",\n            \"author\": \"test1\",\n            \"hasImg\": true,\n            \"notice\": false\n        },{\n            \"postId\": 2,\n            \"recommendCnt\": 0,\n            \"viewCnt\": 0,\n            \"createdTime\": \"2020-01-01T00:00:00\",\n            \"title\": \"title1\",\n            \"author\": \"test1\",\n            \"hasImg\": true,\n            \"notice\": false\n        },{\n            \"postId\": 2,\n            \"recommendCnt\": 0,\n            \"viewCnt\": 0,\n            \"createdTime\": \"2020-01-01T00:00:00\",\n            \"title\": \"title1\",\n            \"author\": \"test1\",\n            \"hasImg\": true,\n            \"notice\": false\n        }]\n    }\n    \n\n\n\n\nexport const postResultMockup : ContentType = \n{\n    \"postId\": 2,\n    \"author\": \"user1\",\n    \"title\": \"title1\",\n    \"content\": \"conetne1\",\n    \"viewCnt\": 0,\n    \"recommendCnt\": 0,\n    \"commentList\": [\n        {\n            \"commentId\": 1,\n            \"username\": \"user2\",\n            \"content\": \"댓글입니다\",\n            \"childComment\": [\n                {\n                    \"commentId\": 2,\n                    \"username\": \"user1\",\n                    \"content\": \"대댓글입니다\",\n                    \"childComment\": [],\n                    \"createdTime\": \"2020-01-01T00:00:00\"\n                },\n                {\n                    \"commentId\": 3,\n                    \"username\": \"user2\",\n                    \"content\": \"대대ㅡㅅ글입니다\",\n                    \"childComment\": [],\n                    \"createdTime\": \"2020-01-01T00:00:00\"\n                }\n            ],\n            \"createdTime\": \"2020-01-01T00:00:00\"\n        },\n        {\n            \"commentId\": 4,\n            \"username\": \"user1\",\n            \"content\": \"새로운 댓글입니다\",\n            \"childComment\": [],\n            \"createdTime\": \"2020-01-01T00:00:00\"\n        }\n    ],\n    \"createdTime\": \"2020-01-01T00:00:00\",\n    \"recommend\": false // 로그인한 사용자가 추천을 눌렀으면 true \n}\n\n\n\n","import { Observable , concat, of  } from \"rxjs\";\nimport { ajax } from \"rxjs/ajax\";\n\nimport { takeUntil, map,  filter, tap  } from \"rxjs/operators\";\nimport { ListType, ContentType, PostListType } from \"../../Util/Entity\";\nimport { catchErrorJustReturn } from \"../../Library/RxJsExtension\";\nimport { Reactor, ReactorControlProps,  ReactorControlType } from \"reactivex-redux\";\nimport { listResultMockup } from \"../../Data/mockup\";\n\nexport function TopicToString( topicType: Topic) {\n    switch(topicType) {\n        case \"clan\":\n            return \"클랜홍보\"\n        case \"free\":\n            return \"자유게시판\"\n        case \"tips\":\n            return \"공략/팁\"\n        case \"together\":\n            return \"같이하기\"\n    }\n}\n\nexport type Topic = \"tips\"|\"free\"| \"together\"| \"clan\"\ntype Mode = \"list\" | \"edit\" | \"view\"\n\nexport const CLICKTOPIC = \"CLICKTOPIC\" as const\nexport const CLICKWRITE = \"CLICKWRITE\" as const\nexport const CLICKPAGE = \"CLICKPAGE\" as const\nexport const CLICKPOST = \"CLICKPOST\" as const \nexport const CLICKBACK = \"CLICKBACK\" as const\n\n\nexport interface CLICKTOPIC {\n    type: typeof CLICKTOPIC;\n    newTopic: Topic,\n}\nexport interface CLICKWRITE {\n    type: typeof CLICKWRITE;\n}\nexport interface CLICKPAGE {\n    type: typeof CLICKPAGE;\n    newPage: number,\n}\nexport interface CLICKPOST {\n    type: typeof CLICKPOST;\n    postId: number,\n}\n\nexport interface CLICKBACK {\n    type: typeof CLICKBACK;\n}\n\nexport type ForumAction = CLICKTOPIC | CLICKWRITE | CLICKPAGE | CLICKPOST | CLICKBACK \n\n\nexport const SETLOADING = \"SETLOADING\"\nexport const FETCHLIST = \"FETCHLIST\"\nexport const FETCHPOST = \"FETCHPOST\"\nexport const MODECHANGE = \"MODECHANGE\"\nexport const TOPICCHANGE = \"TOPICCHANGE\"\n\n// 상태에 대한 힌트.\nexport interface SETLOADING {\n    type: typeof SETLOADING,\n    isLoading: boolean,\n}\n\nexport interface FETCHLIST {\n    type: typeof FETCHLIST,\n    list: ListType[],\n    page: number\n}\nexport interface FETCHPOST {\n    type: typeof FETCHPOST,\n    post: ContentType,\n}\n\nexport interface MODECHANGE {\n    type: typeof MODECHANGE,\n    mode : Mode,\n}\n\nexport interface TOPICCHANGE {\n    type: typeof TOPICCHANGE,\n    topic: Topic,\n}\n\ntype ForumMutation = SETLOADING | FETCHLIST | FETCHPOST | MODECHANGE | TOPICCHANGE \n// --- state\n\nexport interface ForumState {\n    topic : Topic,\n    mode: Mode,\n    page: number,\n    list: ListType[],\n    isLoading:boolean,\n    isError:boolean,\n    post?: ContentType,\n    isLogined: boolean,\n}\n\nexport const ForumStateInitialState : ForumState = {\n    isError: false,\n    isLoading: true,\n    page: 1,\n    mode:\"list\",\n    topic:\"free\",\n    post: undefined,\n    list:[],\n    isLogined: false,\n}\n\nexport interface ForumReactorProps extends ReactorControlProps<ForumAction, ForumState> { \n    reactor_control: ReactorControlType<ForumAction, ForumState>;\n} ;\n\n\nexport default class ForumReactor extends Reactor<ForumAction, ForumState, ForumMutation> {\n\n    mutate(action: ForumAction): Observable<ForumMutation> {\n        switch(action.type) {\n            case \"CLICKTOPIC\":\n                return concat(\n                    //topic change\n                    of<ForumMutation>({type:\"TOPICCHANGE\", topic: action.newTopic}),\n                    of<MODECHANGE>({type:\"MODECHANGE\", mode: \"list\"}),\n                    //is Loading\n                    of<ForumMutation>({type:\"SETLOADING\", isLoading: true}),\n                    //WebRequest\n                    this.fetchList(action.newTopic).pipe(\n                        // takeUntil(of(1)),\n                        takeUntil(this.action.pipe(filter((value)=> {\n                            return value.type === action.type\n                        }))),\n                        map<PostListType, ForumMutation>( res => {\n                            return {type:\"FETCHLIST\", list: res.postList, page: 1 } \n                        }),\n                    ),\n                    // of<ForumMutation>({type:\"SETLOADING\", isLoading: false}).pipe( tap (value => console.log(\"VALUE OUT\")))\n\n                    // of<ForumMutation>({type:\"FETCHLIST\", isLoading: true}),\n                    //is Loading\n                    // of<ForumMutation>({type:\"SETLOADING\", isLoading: false})\n                        //결과값 전달=> 결과값이 다르지않으면 그대로전달.\n                )\n\n        case \"CLICKBACK\":\n            return of<MODECHANGE>({type:\"MODECHANGE\", mode: \"list\"})\n        \n        case \"CLICKWRITE\":\n            return of<MODECHANGE>({type: \"MODECHANGE\", mode:\"edit\"})\n\n        case \"CLICKPAGE\":\n            return concat(\n                //is Loading\n                of<ForumMutation>({type:\"SETLOADING\", isLoading: true}),\n                //fetching List\n                this.fetchList(this.currentState.topic, action.newPage).pipe(\n                    takeUntil(this.action.pipe(filter(value => value === action))),\n                    map<PostListType, ForumMutation>( res => {\n                        return {type:\"FETCHLIST\", list: res.postList, page: 1 } \n                    })\n                ),\n                of<ForumMutation>({type:\"SETLOADING\", isLoading: false}),\n            )\n\n        case \"CLICKPOST\":\n            return concat(\n            of<MODECHANGE>({type: \"MODECHANGE\", mode:\"view\"}),\n            of<ForumMutation>({type:\"SETLOADING\", isLoading: true}),\n            //WebRequest\n            this.fetchPost(action.postId).pipe(\n                tap( value => console.log(value)),\n                // takeUntil(this.action.pipe(filter(value => value === action))),\n                map<ContentType, ForumMutation>( res => ({type:\"FETCHPOST\", post : res}))\n            ),\n            // of<ForumMutation>({type:\"FETCHLIST\", isLoading: true}),\n            //is Loading\n            of<ForumMutation>({type:\"SETLOADING\", isLoading: false}),\n            )\n        }\n        \n    }\n\n    reduce(state: ForumState, mutation: ForumMutation): ForumState {\n\n        let newState = state;\n        switch(mutation.type) {\n            case \"TOPICCHANGE\":\n                newState.topic = mutation.topic\n                return newState;\n            case \"MODECHANGE\":\n                newState.mode = mutation.mode\n                return newState;\n            case \"SETLOADING\":\n                newState.isLoading = mutation.isLoading\n                return newState\n            case \"FETCHLIST\":\n                newState.isLoading = false;\n                newState.list = mutation.list;\n                newState.page = mutation.page;\n                return newState\n                // if (mutation.list.length === 0){\n                //     newState.isError = true;\n                //     return newState\n                // } else {\n            case \"FETCHPOST\":\n                if (Object.keys(mutation.post).length === 0) {\n                    newState.isError = true;\n                    return newState;\n                } else {\n                    newState.post = mutation.post;\n                    return newState;\n                }\n        }\n    }\n   \n    fetchList(topic: Topic, page: number = 1) : Observable<PostListType> {\n\n        return ajax.getJSON<PostListType>(`https://www.r6-search.me/api/c/topic/${topic}?page=${page}`)\n        .pipe(\n            catchErrorJustReturn( listResultMockup as PostListType)\n        )\n    }\n\n    fetchPost(postId: number) : Observable<ContentType> {\n        return ajax.getJSON<ContentType>(`https://www.r6-search.me/api/c/post/${postId}`)\n        .pipe(\n            catchErrorJustReturn({\n                \"postId\": 33,\n                \"author\": \"test-account\",\n                \"title\": \"수정된 제목입니다\",\n                \"content\": \"수정된 내용입니다\",\n                \"viewCnt\": 7,\n                \"recommendCnt\": 0,\n                \"commentList\": [\n                    {\n                        \"commentId\": 7,\n                        \"username\": \"test-account\",\n                        \"content\": \"수정덧글\",\n                        \"childComment\": [],\n                        \"createdTime\": \"2020-08-01T03:20:48\"\n                    },\n                    {\n                        \"commentId\": 8,\n                        \"username\": \"test-account\",\n                        \"content\": \"테스트 덧글입니다\",\n                        \"childComment\": [],\n                        \"createdTime\": \"2020-08-01T03:25:19\"\n                    }\n                ],\n                \"createdTime\": \"2020-08-01T03:08:23\",\n                \"recommend\": false\n            } as ContentType)\n        )\n    }\n\n }","import React from \"react\";\nimport ForumReactor, { ForumState, ForumStateInitialState, ForumAction } from \"./ForumReactor\";\nimport { deepDistinctUntilChanged, ReactorControlType } from \"reactivex-redux\";\nimport styled from \"styled-components\";\nimport { map } from \"rxjs/operators\";\n\nconst FROUMMARGIN = styled.div`\n    margin: 0 auto;\n    max-width: 1200px;\n    margin-top:90px;\n    padding: 0 1rem;\n`\n\nexport class R6Forum extends React.Component {\n    \n    reactor?: ForumReactor | undefined;\n    reactorControls?: ReactorControlType<ForumAction, ForumState>;\n    initialState?: ForumState\n\n    componentWillMount(){\n        this.reactor = new ForumReactor(ForumStateInitialState)\n        this.reactorControls = this.reactor.getReactorControl();\n    }\n\n    componentDidMount(){\n\n        this.reactor?.dispatch({type:\"CLICKTOPIC\", newTopic:\"tips\"});\n        this.reactor!.disposedBy = this.reactor?.state.pipe(\n            map( value => value.mode ),\n            deepDistinctUntilChanged(),\n        ).subscribe( \n            mode=> this.setState({mode})\n        )\n    }\n\n    componentWillUnmount(){\n        this.reactor?.disposeAll();\n    }\n\n    render(){\n        return(\n            <React.Fragment>\n                <FROUMMARGIN>\n                        {/* <R6CommunityNavigation reactor_control={this.reactorControls!}></R6CommunityNavigation> */}\n                        {/* {\n                            this.reactor?.currentState.mode === \"list\" &&\n                                <R6List reactor_control={this.reactorControls!}></R6List>\n                        }\n                        {\n                            this.reactor?.currentState.mode === \"list\" &&\n                                <R6ListFooter reactor_control={this.reactorControls!}></R6ListFooter>\n                        }\n                        {\n                            this.reactor?.currentState.mode === \"edit\" &&\n                                <R6PostWrite reactor_control={this.reactorControls!}></R6PostWrite>\n                        }\n                        {\n                            this.reactor?.currentState.mode === \"view\" &&\n                                <R6Post reactor_control={this.reactorControls!}></R6Post>\n                        } */}\n                </FROUMMARGIN>\n            </React.Fragment>\n        )\n    }\n\n}\n\nexport default R6Forum;","import React, { useState, Suspense, lazy } from 'react';\nimport './App.css';\n\nimport styled from 'styled-components'\n// import { ModalReactor } from './Component/Modal/ModalReactor';\n\nimport { \n  R6Navigation, \n  R6Footer\n} from './Component';\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  RouteComponentProps,\n  withRouter\n} from \"react-router-dom\";\n\nimport Page404 from './Component/@2Content/Page404/Page404';\nimport { ForumReactor } from './Component/@0ForumReactor';\nimport { ForumStateInitialState, Topic } from './Component/@0ForumReactor/ForumReactor';\nimport { values } from 'lodash';\nimport { deepDistinctUntilChanged } from 'jsreactorkit';\nimport { skip } from 'rxjs/operators';\n\nconst ListComponent = lazy( () => import('./Component/@2Content/Contents/List/R6List'))\nconst PostComponent = lazy( () =>  import('./Component/@2Content/Contents/List/R6List'))\n\nconst SECTIONWRAPPER = styled.div`\n  min-height:90vh;\n`\n\n\n\n\nconst PADDER = styled.div`\n  max-width: 1200px;\n  margin: 0 auto;\n  padding: 1.5rem 1rem;\n`\n\n\n\n\nclass Main extends React.PureComponent<RouteComponentProps, { currentTopic: Topic }> {\n\n  reactor: ForumReactor;\n  reactorControl: any;\n\n  constructor(props:RouteComponentProps){\n    super(props);\n    this.reactor = new ForumReactor(ForumStateInitialState);\n    this.reactorControl = this.reactor.getReactorControl();\n    this.state = { currentTopic: ForumStateInitialState.topic }\n  }\n\n\n  componentDidMount(){\n    //hot observable만들기?\n    //변경한다? this props\n    this.reactor.dispatch({type:\"CLICKTOPIC\", newTopic:\"free\"})\n    \n    // this.reactor.fireImmediately(\n    //   (value) => { return value.type === \"TOPICCHANGE\"}, \n    //   (result) => {\n    //     if (result.type === \"TOPICCHANGE\") {\n    //       this.setState({currentTopic: result.topic}, () => {\n    //         this.props.history.push(`/${result.topic}`)\n    //       })\n    //     }\n    //   })\n\n\n  }\n\n  render(){\n    return(\n      <React.Fragment>\n         <R6Navigation reactor_control={this.reactorControl}></R6Navigation>\n         <PADDER>\n          <Switch>\n              <Route path={[\"/\", \"/free\"]} exact key=\"free\">\n                <ListComponent reactor_control={this.reactorControl}/>\n              </Route>\n\n              <Route path=\"/tips\" exact>\n                <ListComponent reactor_control={this.reactorControl}/>\n              </Route>\n\n              <Route path=\"/together\" exact>\n                <ListComponent reactor_control={this.reactorControl}/>\n              </Route>\n\n              <Route path=\"/clan\" exact>\n                <ListComponent reactor_control={this.reactorControl}/>\n              </Route>\n\n              <Route>\n                <Page404></Page404>\n              </Route>\n        </Switch>\n       </PADDER>\n     </React.Fragment>\n   );\n    \n  }\n    \n\n}\n\nexport default withRouter(Main);\n//const reactor = new ForumReactor(ForumStateInitialState)\n//const reactorControls = reactor.getReactorControl();\n\n\n// <Router>\n// \n//   <Switch>\n//     <App></App>\n//         {/* <Route path=\"/\" exact component={Landing}/>\n//         <Route path=\"/login\" exact component={Login}/>\n//         <Route path=\"/signup\" exact component={SignUp}/>\n//         <Route path=\"/signup/result\" exact component={SignUpResult}/>\n//         <Route path=\"/search/:searchTerm\" component={Search}/> */}\n//         {/* <Route component={createErrorPageComponent('antd', 404)}></Route> */}\n//         {/* <App /> */}\n//   </Switch>\n// </Router>\n\n// <div className=\"App\">\n// {/* <R6Navigation></R6Navigation>\n//     <SECTIONWRAPPER>\n//       <R6Forum></R6Forum>\n//     </SECTIONWRAPPER>\n//     <R6Login stater={registerSetter}></R6Login>\n//   <R6Footer></R6Footer> */}\n//   {/* <R6Login loginStater={loginSetter} stater={registerSetter}></R6Login> */}\n//   {/* <R6Register stater={registerSetter}></R6Register> */}\n//   {/* <R6Confirmation></R6Confirmation> */}\n//   {/* <R6Confirmation></R6Confirmation> */}\n// { registerState === 0 && \n//   <>\n//     <R6Navigation stater={loginSetter}></R6Navigation>\n//     <SECTIONWRAPPER>\n//       <R6Forum></R6Forum>\n//     </SECTIONWRAPPER>\n//     { loginState && \n//       <R6Login loginStater={loginSetter} stater={registerSetter}></R6Login>\n//     } \n//     <R6Footer></R6Footer>\n//   </>\n// } \n// { registerState === 1 &&\n//   <R6Register stater={registerSetter}></R6Register>\n// }\n// </div>\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Suspense, lazy} from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css'\nimport './index.css';\nimport Main from './Main';\nimport * as serviceWorker from './serviceWorker';\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport GlobalLoading from './GlobalLoading';\n\n// works like global reactor.\n// consider using that\n\n\nReactDOM.render(\n  <>\n    <Router>\n      <Suspense fallback={ <div>loading...</div>}>\n        <Main/>\n      </Suspense>\n    </Router>\n  </>\n,\n  document.getElementById('root')\n);\n\n// <React.StrictMode>\n\n// </React.StrictMode>,\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n"],"sourceRoot":""}