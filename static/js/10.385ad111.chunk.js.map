{"version":3,"sources":["Component/@2Content/Contents/Post/View/R6TextArea.tsx","Component/@2Content/Contents/Post/View/R6Comment.tsx","Component/@2Content/Contents/Post/View/R6Post.tsx"],"names":["TEXTAREA","styled","textarea","R6TextArea","placeholder","textRef","thisTextRef","useRef","useEffect","ref","COMMENTGRID","div","PROFILECONTAINER","CONTENTCONTAINER","CHILDCONTAINER","BUTTONAREA","BUTTONGROUPAREA","CHILDBACKGROUND","R6Comment","isChild","comment","id","onSubmit","useState","state","setState","Icon","name","flipped","rotated","style","marginLeft","rank","size","username","content","Button","icon","color","compact","onClick","console","log","current","value","commentId","childComment","map","index","key","defaultProps","POSTAREA","VIEWERAREA","SUBTITLEAREA","AUTHOR","TIME","MODIFYBUTTONAREA","R6Post","inject","post","forum","observer","commentInput","React","createRef","this","props","getPost","bind","parentId","postComment","isLogined","openLoginModal","setConfirmOpen","delete","postContent","isLoading","isCommentLoading","isConfirmOpened","countOfComments","nickName","Segment","loading","Placeholder","Header","Line","Paragraph","author","title","commentList","createdTime","postId","Confirm","open","onCancel","handleCancel","onConfirm","handleConfirm","fromNow","inverted","handleOpen","Divider","initialValue","as","dividing","labelPosition","disabled","handleOnClick","Fragment","PureComponent"],"mappings":"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","file":"static/js/10.385ad111.chunk.js","sourcesContent":["import styled from \"styled-components\"\nimport React, { useRef, useEffect } from \"react\"\n\nconst TEXTAREA = styled.textarea`\nresize: none;\nmargin-bottom: 1rem;\nwidth: 100%;\nmin-height: 6.125rem;\nfont-size: 1rem;\ncolor: rgb(33, 37, 41);\nline-height: 1.75;\npadding: 1rem 1rem 1.5rem;\noutline: none;\nborder-width: 1px;\nborder-style: solid;\nborder-color: rgb(233, 236, 239);\nborder-image: initial;\nborder-radius: 4px;\n`\n\ninterface Props {\n    placeholder? : string\n    textRef?: (ref : React.RefObject<HTMLTextAreaElement> ) => void | (React.RefObject<HTMLTextAreaElement>);\n}\n\nexport default function R6TextArea({placeholder, textRef} : Props) {\n    const thisTextRef = useRef<HTMLTextAreaElement>(null);\n    useEffect( () => {\n        if (textRef) {\n            if (typeof textRef === \"function\") {\n                textRef(thisTextRef)\n            } else {   \n                (textRef as React.RefObject<HTMLTextAreaElement>) = thisTextRef;\n            }\n        }\n\n\n    }, [])\n    return <TEXTAREA ref={thisTextRef} placeholder={placeholder}></TEXTAREA>\n\n}","\nimport styled from 'styled-components'\nimport React, { useState, useRef } from 'react'\nimport { R6RankIcon } from '../../../../@Reusable-Component'\nimport { Icon, Button } from 'semantic-ui-react'\nimport R6TextArea from './R6TextArea'\nimport { CommentType } from '../../../../../Util/Entity'\nimport Moment from 'react-moment'\n\n\n\n\nconst COMMENTGRID = styled.div`\n    position:relative;\n    display: flex;\n    flex-direction: column;\n    justify-content:flex-end;\n    // border-top: 1px solid #eee;\n    border-bottom: 1px solid #eee;\n    padding: 0px 10px;\n`\n\nconst PROFILECONTAINER = styled.div`\n    display:flex;\n    align-items:center;\n    flex-basis:40px;\n    max-height:40px;\n\n\n    #profile {\n        font-weight:bold;\n        margin-right:10px;\n        margin-left:-5px;\n    }\n\n    #id {\n        font-weight: bold;\n        margin-right:10px;\n        font-size:1.2rem;\n    }\n\n    #time {\n        color : #A9A9A9;\n    }\n`\n\nconst CONTENTCONTAINER = styled.div`\n    display:flex;\n    flex-grow:1;\n    padding-top:10px;\n    padding-bottom:10px;\n    max-height:120px;\n    align-items:center;\n`\n\nconst CHILDCONTAINER = styled.div`\n`\n\nconst BUTTONAREA = styled.div`\n    display:flex;\n    flex-basis:40px;\n    max-height:40px;\n    align-items:center;\n`\n\nconst BUTTONGROUPAREA = styled.div`\n    display:flex;\n    justify-content:flex-end;\n    // margin-bottom: 1rem;\n`\n\nconst CHILDBACKGROUND = styled.div`\n    background-color: rgba(0, 0, 0, 0.016);\n    margin-top: 1.3125rem;\n    border-width: 1px;\n    border-style: solid;\n    border-color: rgba(0, 0, 0, 0.02);\n    border-image: initial;\n    padding: 1rem;\n    border-radius: 4px;\n`\n\n\ninterface Props {\n    /** childComment 여부. 재귀호출 */\n    /** 덧글 내용 */\n    comment: CommentType;\n    /** 수정가능한지 */\n    isEditable?: boolean;\n    /** 답글창이 열려있는지 */\n    isReplying?: boolean;\n    /** 날짜 */\n    date?: string;\n    /** 아이디 */\n    id?: string;\n    /** 프로필 */\n    profile?: string;\n    /** parent */\n    parentId?: string;\n    /** isBest */\n    isBest?: boolean;\n\n    isChild: boolean;\n\n    onSubmit: (content:string, parentId: number) => void;\n\n}\n\n\nexport default function R6Comment({ isChild, id, comment , onSubmit} : Props) {\n\n    const [state, setState] = useState(false);\n    let thisTextRef = useRef<HTMLTextAreaElement>(null);\n\n    return (\n        <COMMENTGRID>\n\n            <PROFILECONTAINER>\n                { isChild && <Icon name={\"level up alternate\"} flipped={\"vertically\"} rotated={\"clockwise\"}></Icon>}\n                <R6RankIcon style={{marginLeft:\"-5px\"}} rank={\"SILVER_I\"} size={30}></R6RankIcon>\n                <div id=\"id\">{comment.username}</div>\n                {/* <Moment>{ props => <span id=\"time\">{comment.createdTime}</span>}</Moment> */}\n            </PROFILECONTAINER>\n            <CONTENTCONTAINER>\n                {comment.content}\n            </CONTENTCONTAINER>\n\n            { !isChild && \n                <BUTTONAREA>\n                    <Button icon color={\"grey\"} size={\"mini\"} compact onClick={()=>{setState(!state)}}>\n                            <Icon name={\"reply\"}></Icon>\n                            &nbsp;&nbsp; 답글달기\n                    </Button>\n                </BUTTONAREA>\n            }\n            {\n                state && \n                <CHILDBACKGROUND>\n                    <R6TextArea placeholder={`${comment.username} 에게 덧글 달기..` } textRef={(ref:any) => thisTextRef = ref}/>\n                    <BUTTONGROUPAREA>\n                        <Button color={\"green\"} size={\"small\"} compact onClick={()=>{\n                            console.log(thisTextRef);\n                            onSubmit(thisTextRef.current!.value, comment.commentId)\n                            }}>\n                                    작성하기\n                        </Button>\n                        <Button color={\"grey\"} size={\"small\"} compact onClick={()=>setState(false)}>\n                                    취소\n                        </Button>\n                    </BUTTONGROUPAREA>\n                </CHILDBACKGROUND>\n            }\n\n            <CHILDCONTAINER>\n                {\n                    comment.childComment.map( (value, index) => {\n                        return <R6Comment isChild={true} comment={value} key={comment.commentId+index+\"_CHILD_COMMENT\"} onSubmit={onSubmit}></R6Comment>\n                    })\n                }\n            </CHILDCONTAINER>\n\n        </COMMENTGRID>\n    )\n}\n\nR6Comment.defaultProps = {\n    isChild : false\n}","import React from \"react\";\nimport styled from \"styled-components\";\nimport { Viewer } from '@toast-ui/react-editor'\nimport { Placeholder, Segment, Header, Divider, Button, Confirm } from \"semantic-ui-react\";\nimport '@toast-ui/editor/dist/toastui-editor-viewer.css';\nimport './R6Post.css';\nimport Moment from \"react-moment\";\nimport { CommentType } from \"../../../../../Util/Entity\";\nimport R6Comment from \"./R6Comment\";\nimport R6TextArea from \"./R6TextArea\";\nimport { observer, inject } from \"mobx-react\";\nimport PostStore from \"../../../../Stores/PostStore\";\nimport ForumStore from \"../../../../Stores/ForumStore\";\n\nconst POSTAREA = styled.div`\n    position: relative;\n    background: #fff;\n    box-shadow: 0 1px 2px 0 rgba(34,36,38,.15);\n    margin: 1rem 0;\n    padding: 2em 2em;\n    border-radius: .28571429rem;\n    border: 1px solid rgba(34,36,38,.15);\n`\n\nconst VIEWERAREA = styled.div`\n    min-height:400px;\n    overflow-y:hidden;\n    word-break:break-all;\n`\n\nconst SUBTITLEAREA = styled.div`\n    display:flex;\n    flex-direction:row;\n    font-size:1.1rem;\n`\n\nconst AUTHOR = styled.div`\n    font-weight:bold;\n    margin-right:0.8em;\n\n`\n\nconst TIME = styled.div`\n    font-size:1rem;\n    color:#A9A9A9;\n`\n\nconst BUTTONAREA = styled.div`\n    display:flex;\n    justify-content: flex-end;\n`\n\n\nconst MODIFYBUTTONAREA = styled.div`\n    margin:14px 0px;\n`\ninterface Props {\n    post?: PostStore;\n    forum?: ForumStore;\n}\n\n@inject(({post, forum}) => ({ forum : forum, post: post}))\n@observer\nclass R6Post extends React.PureComponent<Props> {\n\n    commentInput = React.createRef<HTMLTextAreaElement>();\n\n    componentDidMount() {\n        this.props.post?.getPost();\n    }\n\n    commentList(comment : CommentType[]){\n        \n        return comment.map( (value, index) => {\n            return (\n                <R6Comment key={index+\"_COMMENT\"} comment={value} onSubmit={this.onSubmit.bind(this)}></R6Comment>\n              )\n        })\n    }\n\n    onSubmit(content:string, parentId: number){\n        this.props.post!.postComment( content, parentId )\n    }\n\n    handleOnClick(){\n        if (!this.props.forum!.isLogined) {\n            this.props.forum!.openLoginModal(true);\n        } else {\n            this.props.post!.postComment((this.commentInput as any).current.value)\n        }\n    } \n\n    handleCancel(){\n        this.props.post!.setConfirmOpen(false);\n    }\n    handleOpen(){\n        this.props.post!.setConfirmOpen(true);\n    }\n    handleConfirm(){\n        this.props.post?.delete();        \n    }\n    /**\n     * \n                <Comment key={\"COMMENT_\" + index}>\n                <Comment.Avatar src='https://react.semantic-ui.com/images/avatar/small/matt.jpg' />\n                <Comment.Content>\n                  <Comment.Author as='a'>{value.username}</Comment.Author>\n                  <Comment.Metadata>\n                  <Moment fromNow>{value.createdTime}</Moment>\n                  </Comment.Metadata>\n                  <Comment.Text>{value.content}</Comment.Text>\n                  <Comment.Actions>\n                    <Comment.Action>Reply</Comment.Action>\n                  </Comment.Actions>\n                </Comment.Content>\n              </Comment>\n     */\n    render(){\n        const { postContent, isLoading, isCommentLoading, isConfirmOpened, countOfComments} = this.props.post!;\n        const { nickName } = this.props.forum!;\n\n        if ( isLoading || !postContent ) {\n            return (\n                <Segment loading>\n                    <Placeholder>\n                        <Placeholder.Header>\n                        <Placeholder.Line />\n                        <Placeholder.Line />\n                        </Placeholder.Header>\n                        <Placeholder.Paragraph>\n                        <Placeholder.Line />\n                        <Placeholder.Line />\n                        <Placeholder.Line />\n                        <Placeholder.Line />\n                        </Placeholder.Paragraph>\n                    </Placeholder>\n                 </Segment>\n            \n            )\n        } else {\n            const { author, title, content, commentList, createdTime, postId} = postContent!\n            return (\n                <>\n                \n                <Confirm\n                    open={isConfirmOpened}\n                    content='삭제하시겠습니까?'\n                    onCancel={this.handleCancel.bind(this)}\n                    onConfirm={this.handleConfirm.bind(this)}\n                />\n\n                    <POSTAREA key={postId + \"_KEY\"}>\n                        <Header size={'huge'}>{title}</Header>\n                        <SUBTITLEAREA>\n                            <AUTHOR>{author}</AUTHOR>\n                            <TIME><Moment fromNow>{createdTime}</Moment></TIME>\n                        </SUBTITLEAREA>\n                        {\n                            nickName === author && \n                            <MODIFYBUTTONAREA>\n                                <Button inverted color={\"red\"} onClick={this.handleOpen.bind(this)}> 삭제 </Button>\n                                <Button inverted color={\"green\"}> 수정 </Button>\n                            </MODIFYBUTTONAREA>\n                        }\n\n                        <Divider />\n\n                        <VIEWERAREA>\n                            <Viewer initialValue={content}/>\n                        </VIEWERAREA>\n\n                        <Header key={\"MY_KEY\"} as='h2' dividing>\n                            덧글 { countOfComments } 개\n                        </Header>\n                        \n                        <R6TextArea placeholder='덧글을 입력해주세요' textRef={ (ref) => this.commentInput = ref }/>\n                        <BUTTONAREA>\n                            <Button \n                                content='덧글 달기'\n                                labelPosition='left'\n                                icon='edit'\n                                color={\"green\"}\n                                disabled={isCommentLoading}\n                                loading={isCommentLoading}\n                                onClick={this.handleOnClick.bind(this)}/>\n                            </BUTTONAREA>\n\n                        {/* <Form>\n                            <R6TextArea placeholder='Tell us more' ref={ (ref) => this.commentInput = ref }/>\n                            <BUTTONAREA>\n                            <Button \n                                content='덧글 달기'\n                                labelPosition='left'\n                                icon='edit'\n                                color={\"green\"}\n                                disabled={this.state.commentIsLoading}\n                                loading={this.state.commentIsLoading}\n                                onClick={()=>{\n                                    \n                                    const {isLogined} = this.props.reactor.getState();\n                                    if (isLogined) {\n                                        this.reactor?.dispatch({type:\"CLICKREPLY\", postId: postId, content:(this.commentInput as any).current.ref.current.value})\n                                    } else {\n                                        this.props.reactor.dispatch({type:\"CLICKLOGINBUTTON\"})\n                                    }\n                                    \n                                    }}/>\n                            </BUTTONAREA>\n                        </Form> */}\n                        \n                        <React.Fragment>\n                            {/* <R6Comment comment={commentsReactorList}></R6Comment> */}\n                            { this.commentList(commentList) }\n                            {/* <Comment.Group>\n                                { commentsReactorList.length !== 0 ? this.commentList(commentsReactorList) : this.commentList(commentList) }\n                            </Comment.Group> */}\n                        </React.Fragment>\n                    </POSTAREA>\n\n                </>\n            )\n            \n        }        \n    }\n}\n\nexport default R6Post\n"],"sourceRoot":""}